(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{442:function(t,r,e){"use strict";e.r(r);var v=e(3),o=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"}),r("p",[t._v("传统 Ethereum validator client 有单节点故障问题，会引发质押的ETH的惩罚、甚至退网。分布式验证器技术（DVT）会成为接下来 Ethereum 的一个重点。")])]),t._v(" "),r("h2",{attrs:{id:"distributed-validators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#distributed-validators"}},[t._v("#")]),t._v(" Distributed Validators")]),t._v(" "),r("p",[t._v("在 "),r("strong",[r("a",{attrs:{href:"https://www.chaincatcher.com/article/2082160",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vitalik 发布以太坊最新路线六大关键路线"),r("OutboundLink")],1)]),t._v(" 中的 "),r("strong",[t._v("The Merge")]),t._v(" 部分提到了—— "),r("strong",[t._v("Distributed Validators（DV）")]),t._v("，分布式验证器技术。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/dv.jpg",alt:"dv"}})]),t._v(" "),r("p",[t._v("旨在将以太坊验证者的工作分布到一组分布式节点中的技术，与目前在一台机器上运行验证者客户单的传统技术相比，更加能够提高安全性、在线弹性等。")]),t._v(" "),r("p",[t._v("具体参看 "),r("strong",[r("a",{attrs:{href:"https://github.com/ethereum/distributed-validator-specs",target:"_blank",rel:"noopener noreferrer"}},[t._v("DV 技术规范"),r("OutboundLink")],1)]),t._v("。")]),t._v(" "),r("p",[t._v("DV技术主要实现 —— "),r("a",{attrs:{href:"https://ssv.network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSV"),r("OutboundLink")],1),t._v("（"),r("a",{attrs:{href:"https://github.com/prysmaticlabs/prysm",target:"_blank",rel:"noopener noreferrer"}},[t._v("与Prysm 以太坊客户端"),r("OutboundLink")],1),t._v("交互的 DV 协议的 Go 实现。）")]),t._v(" "),r("p",[t._v("SSV仓库 原本由 "),r("a",{attrs:{href:"https://github.com/ethereum/ssv",target:"_blank",rel:"noopener noreferrer"}},[t._v("ethereum/"),r("strong",[t._v("ssv")]),r("OutboundLink")],1),t._v(" 官方维护，后转为由 "),r("a",{attrs:{href:"https://github.com/bloxapp/ssv",target:"_blank",rel:"noopener noreferrer"}},[t._v("bloxapp/ssv"),r("OutboundLink")],1),t._v(" 维护。")]),t._v(" "),r("h3",{attrs:{id:"m-of-n阈值签名-解读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#m-of-n阈值签名-解读"}},[t._v("#")]),t._v(" "),r("strong",[r("em",[t._v("M-of-N")]),t._v("阈值签名 解读")])]),t._v(" "),r("p",[t._v("N个节点在M个正确的节点上即可运行。")]),t._v(" "),r("ul",[r("li",[t._v("BFT 共识协议 "),r("code",[t._v("M = ceil(2 * N / 3)")]),t._v(" "),r("ul",[r("li",[t._v("ceil函数：返回大于或者等于指定表达式的最小整数")]),t._v(" "),r("li",[t._v("如果 "),r("code",[t._v("N=4")]),t._v(" ，那么 "),r("code",[t._v("2 * N / 3 = 2.67")]),t._v(" ，即 "),r("code",[t._v("M = 3")])])])]),t._v(" "),r("li",[t._v("领导者安全规范协议：在"),r("em",[t._v("M")]),t._v("个正确的节点上成功运行，不超过"),r("code",[t._v("F = (N-1)/3")]),t._v("拜占庭节点，并且不超过"),r("em",[t._v("N。 (F 代表最大故障节点数)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://docs.ssv.network/learn/introduction/tech-overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("ssv中的实现"),r("OutboundLink")],1),t._v("： "),r("code",[t._v("n >= 3f + 1")]),t._v(" "),r("code",[t._v("k = 2f + 1")]),t._v(" "),r("ul",[r("li",[t._v("与上述 领导者安全规范协议 一致")]),t._v(" "),r("li",[t._v("n为总数 f为最大故障数 k为最少正确运行节点数")])])])])])}),[],!1,null,null,null);r.default=o.exports}}]);