(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{462:function(e,r,t){"use strict";t.r(r);var a=t(3),n=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"编译原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译原理"}},[e._v("#")]),e._v(" 编译原理")]),e._v(" "),r("p",[e._v("Go是一门 "),r("strong",[e._v("编译型")]),e._v("、"),r("strong",[e._v("强类型")]),e._v("、"),r("strong",[e._v("静态")]),e._v(" 语言。")]),e._v(" "),r("p",[e._v("Go的编译过程被分为四个阶段：")]),e._v(" "),r("ol",[r("li",[e._v("词法与语法分析")]),e._v(" "),r("li",[e._v("类型检查和AST转换")]),e._v(" "),r("li",[e._v("通用SSA生成（中间代码生成）")]),e._v(" "),r("li",[e._v("机器码生成")])]),e._v(" "),r("blockquote",[r("p",[e._v("学过编译原理的人可能听说过编译器的前端和后端，编译器的前端一般承担着词法分析、语法分析、类型检查和中间代码生成几部分工作，而编译器后端主要负责目标代码的生成和优化，也就是将中间代码翻译成目标机器能够运行的二进制机器码。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://img.draveness.me/2019-12-20-15768548776662-complication-process.png",alt:"编译原理的核心过程"}})])]),e._v(" "),r("h3",{attrs:{id:"词法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[e._v("#")]),e._v(" 词法分析")]),e._v(" "),r("p",[e._v("所有的编译过程其实都是从解析代码的源文件开始的，"),r("strong",[e._v("词法分析的作用就是解析源代码文件，它将文件中的字符串序列转换成 Token 序列")]),e._v("。")]),e._v(" "),r("p",[r("em",[e._v("我们一般会把执行词法分析的程序称为词法解析器（lexer）。")])]),e._v(" "),r("h3",{attrs:{id:"语法分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[e._v("#")]),e._v(" 语法分析")]),e._v(" "),r("p",[e._v("语法分析的输入是词法分析器输出的 Token 序列，语法分析器会按照顺序解析 Token 序列，该过程会将词法分析生成的 Token 按照编程语言定义好的文法（Grammar）自下而上或者自上而下的规约，每一个 Go 的源代码文件最终会被归纳成一个 "),r("a",{attrs:{href:"https://golang.org/ref/spec#Source_file_organization",target:"_blank",rel:"noopener noreferrer"}},[e._v("SourceFile"),r("OutboundLink")],1),e._v(" 结构。")]),e._v(" "),r("p",[e._v("Token 到上述抽象语法树（AST）的转换过程会用到语法解析器，每一个 AST 都对应着一个单独的 Go 语言文件，这个抽象语法树中包括当前文件属于的包名、定义的常量、结构体和函数等。")]),e._v(" "),r("h3",{attrs:{id:"类型检查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型检查"}},[e._v("#")]),e._v(" 类型检查")]),e._v(" "),r("p",[e._v("当拿到一组文件的抽象语法树之后，Go 语言的编译器会对语法树中定义和使用的类型进行检查，类型检查会按照以下的顺序分别验证和处理不同类型的节点：")]),e._v(" "),r("ol",[r("li",[e._v("常量、类型和函数名及类型；")]),e._v(" "),r("li",[e._v("变量的赋值和初始化；")]),e._v(" "),r("li",[e._v("函数和闭包的主体；")]),e._v(" "),r("li",[e._v("哈希键值对的类型；")]),e._v(" "),r("li",[e._v("导入函数体；")]),e._v(" "),r("li",[e._v("外部的声明；")])]),e._v(" "),r("p",[e._v("通过对整棵抽象语法树的遍历，我们在每个节点上都会对当前子树的类型进行验证，以保证节点不存在类型错误，所有的类型错误和不匹配都会在这一个阶段被暴露出来，其中包括：结构体对接口的实现。")]),e._v(" "),r("p",[e._v("类型检查阶段不止会对节点的类型进行验证，还会展开和改写一些内建的函数，例如 make 关键字在这个阶段会根据子树的结构被替换成 "),r("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.makeslice",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("runtime.makeslice")]),r("OutboundLink")],1),e._v(" 或者 "),r("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.makechan",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("runtime.makechan")]),r("OutboundLink")],1),e._v(" 等函数。")]),e._v(" "),r("h3",{attrs:{id:"中间代码生成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中间代码生成"}},[e._v("#")]),e._v(" 中间代码生成")]),e._v(" "),r("p",[e._v("在类型检查之后，就可以认为当前文件中的代码不存在语法错误和类型错误的问题了，编译器会编译整个 Go 语言项目中的全部函数，这些函数会在一个编译队列中等待几个 Goroutine 的消费，并发执行的 Goroutine 会将所有函数对应的抽象语法树转换成中间代码。")]),e._v(" "),r("p",[e._v("由于 Go 语言编译器的中间代码使用了 SSA（静态单赋值） 的特性，所以在这一阶段我们能够分析出代码中的无用变量和片段并对代码进行优化。")]),e._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_single_assignment_form",target:"_blank",rel:"noopener noreferrer"}},[e._v("静态单赋值"),r("OutboundLink")],1),e._v("（Static Single Assignment、SSA）是中间代码的特性，如果中间代码具有静态单赋值的特性，那么每个变量就只会被赋值一次。例子：")]),e._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[e._v("x "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nx "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\ny "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" x\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br")])]),r("p",[e._v("经过简单的分析，我们就能够发现上述的代码第一行的赋值语句 "),r("code",[e._v("x := 1")]),e._v(" 不会起到任何作用。下面是具有 SSA 特性的中间代码，我们可以清晰地发现变量 "),r("code",[e._v("y_1")]),e._v(" 和 "),r("code",[e._v("x_1")]),e._v(" 是没有任何关系的，所以在机器码生成时就可以省去 "),r("code",[e._v("x := 1")]),e._v(" 的赋值，通过减少需要执行的指令优化这段代码。")]),e._v(" "),r("div",{staticClass:"language-go line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-go"}},[r("code",[e._v("x_1 "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nx_2 "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\ny_1 "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" x_2\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br")])])]),e._v(" "),r("h3",{attrs:{id:"机器码生成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#机器码生成"}},[e._v("#")]),e._v(" 机器码生成")]),e._v(" "),r("p",[e._v("Go 语言源代码的 "),r("a",{attrs:{href:"https://github.com/golang/go/tree/master/src/cmd/compile/internal",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("src/cmd/compile/internal")]),r("OutboundLink")],1),e._v(" 目录中包含了很多机器码生成相关的包，不同类型的 CPU 分别使用了不同的包生成机器码，其中包括 amd64、arm、arm64、mips、mips64、ppc64、s390x、x86 和 wasm。")]),e._v(" "),r("blockquote",[r("p",[r("strong",[e._v("指令集架构")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Instruction_set_architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("指令集架构"),r("OutboundLink")],1),e._v("是计算机的抽象模型，在很多时候也被称作架构或者计算机架构，它是计算机软件和硬件之间的接口和桥梁"),r("a",{attrs:{href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-machinecode/#fn:1",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),r("OutboundLink")],1),e._v("；一个为特定指令集架构编写的应用程序能够运行在所有支持这种指令集架构的机器上，也就是说如果当前应用程序支持 x86 的指令集，那么就可以运行在所有使用 x86 指令集的机器上，这其实就是抽象层的作用。")]),e._v(" "),r("p",[r("strong",[e._v("复杂指令集（CISC）和精简指令集（RISC）")])]),e._v(" "),r("p",[e._v("复杂指令集架构包含了很多特定的指令，但是其中的一些指令很少会被程序使用，而精简指令集只实现了经常被使用的指令，不常用的操作都会通过组合简单指令来实现。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Complex_instruction_set_computer",target:"_blank",rel:"noopener noreferrer"}},[e._v("复杂指令集"),r("OutboundLink")],1),e._v("的特点就是指令数目多并且复杂，每条指令的字节长度并不相等，x86 就是常见的复杂指令集处理器，它的指令长度大小范围非常广，从 1 到 15 字节不等，对于长度不固定的指令，计算机必须额外对指令进行判断，这需要付出额外的性能损失。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Reduced_instruction_set_computer",target:"_blank",rel:"noopener noreferrer"}},[e._v("精简指令集"),r("OutboundLink")],1),e._v("对指令的数目和寻址方式做了精简，大大减少指令数量的同时更容易实现，指令集中的每一个指令都使用标准的字节长度、执行时间相比复杂指令集会少很多，处理器在处理指令时也可以流水执行，提高了对并行的支持。作为一种常见的精简指令集处理器，arm 使用 4 个字节作为指令的固定长度，省略了判断指令的性能损失，精简指令集其实就是利用了我们耳熟能详的 20/80 原则，用 20% 的基础指令和它们的组合来解决问题。")])])])}),[],!1,null,null,null);r.default=n.exports}}]);