(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{468:function(t,e,r){"use strict";r.r(e);var n=r(3),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"设计原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计原理"}},[t._v("#")]),t._v(" 设计原理")]),t._v(" "),e("p",[t._v("Go 语言从实现计时器到现在经历过很多个版本的迭代，到最新的版本为止，计时器的实现分别经历了以下几个过程：")]),t._v(" "),e("ol",[e("li",[t._v("Go 1.9 版本之前，所有的计时器由全局唯一的四叉堆维护"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:1",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[t._v("Go 1.10 ~ 1.13，全局使用 64 个四叉堆维护全部的计时器，每个处理器（P）创建的计时器会由对应的四叉堆维护"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:2",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[t._v("Go 1.14 版本之后，每个处理器单独管理计时器并通过网络轮询器触发"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:3",target:"_blank",rel:"noopener noreferrer"}},[t._v("3"),e("OutboundLink")],1),t._v("；")])]),t._v(" "),e("h3",{attrs:{id:"全局四叉堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局四叉堆"}},[t._v("#")]),t._v(" 全局四叉堆")]),t._v(" "),e("p",[t._v("Go 1.10 之前的计时器都使用最小四叉堆实现，所有的计时器都会存储在如下所示的结构体 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timers:093adee",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timers:093adee")]),e("OutboundLink")],1),t._v(" 中：")]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timers "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlock         mutex\n\tgp           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("g\n\tcreated      "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tsleeping     "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\trescheduling "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tsleepUntil   "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\twaitnote     note\n\tt            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timer\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("p",[t._v("这个结构体中的字段 "),e("code",[t._v("t")]),t._v(" 就是最小四叉堆，运行时创建的所有计时器都会加入到四叉堆中。"),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timerproc:093adee",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timerproc:093adee")]),e("OutboundLink")],1),t._v(" Goroutine 会运行时间驱动的事件，运行时会在发生以下事件时唤醒计时器：")]),t._v(" "),e("ul",[e("li",[t._v("四叉堆中的计时器到期；")]),t._v(" "),e("li",[t._v("四叉堆中加入了触发时间更早的新计时器；")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.draveness.me/2020-01-25-15799218054781-golang-timer-quadtree.png",alt:"golang-timer-quadtree"}})]),t._v(" "),e("p",[t._v("然而全局四叉堆共用的互斥锁对计时器的影响非常大，计时器的各种操作都需要获取全局唯一的互斥锁，这会严重影响计时器的性能。")]),t._v(" "),e("h3",{attrs:{id:"分片四叉堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分片四叉堆"}},[t._v("#")]),t._v(" 分片四叉堆")]),t._v(" "),e("p",[t._v("Go 1.10 将全局的四叉堆分割成了 64 个更小的四叉堆"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:5",target:"_blank",rel:"noopener noreferrer"}},[t._v("5"),e("OutboundLink")],1),t._v("。在理想情况下，四叉堆的数量应该等于处理器的数量，但是这需要实现动态的分配过程，所以经过权衡最终选择初始化 64 个四叉堆，以牺牲内存占用的代价换取性能的提升。")]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" timersLen "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timers "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("timersLen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttimersBucket\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" timersBucket "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlock         mutex\n\tgp           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("g\n\tcreated      "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tsleeping     "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\trescheduling "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tsleepUntil   "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\twaitnote     note\n\tt            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timer\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("p",[t._v("如果当前机器上的处理器 P 的个数超过了 64，多个处理器上的计时器就可能存储在同一个桶中。每一个计时器桶都由一个运行 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timerproc:76f4fd8",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timerproc:76f4fd8")]),e("OutboundLink")],1),t._v(" 函数的 Goroutine 处理。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.draveness.me/2020-01-25-15799218054791-golang-timer-bucket.png",alt:"golang-timer-bucket"}})]),t._v(" "),e("p",[t._v("将全局计时器分片的方式，虽然能够降低锁的粒度，提高计时器的性能，但是 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timerproc:76f4fd8",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timerproc:76f4fd8")]),e("OutboundLink")],1),t._v(" 造成的处理器和线程之间频繁的上下文切换却成为了影响计时器性能的首要因素。")]),t._v(" "),e("h3",{attrs:{id:"网络轮询器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络轮询器"}},[t._v("#")]),t._v(" 网络轮询器")]),t._v(" "),e("p",[t._v("在最新版本的实现中，计时器桶已经被移除"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:7",target:"_blank",rel:"noopener noreferrer"}},[t._v("7"),e("OutboundLink")],1),t._v("，所有的计时器都以最小四叉堆的形式存储在处理器 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.p",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.p")]),e("OutboundLink")],1),t._v(" 中。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img.draveness.me/2020-01-25-15799218054798-golang-p-and-timers.png",alt:"golang-p-and-timers"}})]),t._v(" "),e("p",[t._v("处理器 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.p",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.p")]),e("OutboundLink")],1),t._v(" 中与计时器相关的有以下字段：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("timersLock")]),t._v(" — 用于保护计时器的互斥锁；")]),t._v(" "),e("li",[e("code",[t._v("timers")]),t._v(" — 存储计时器的最小四叉堆；")]),t._v(" "),e("li",[e("code",[t._v("numTimers")]),t._v(" — 处理器中的计时器数量；")]),t._v(" "),e("li",[e("code",[t._v("adjustTimers")]),t._v(" — 处理器中处于 "),e("code",[t._v("timerModifiedEarlier")]),t._v(" 状态的计时器数量；")]),t._v(" "),e("li",[e("code",[t._v("deletedTimers")]),t._v(" — 处理器中处于 "),e("code",[t._v("timerDeleted")]),t._v(" 状态的计时器数量；")])]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" p "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\ttimersLock mutex\n\ttimers "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timer\n\n\tnumTimers     "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n\tadjustTimers  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n\tdeletedTimers "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("p",[t._v("原本用于管理计时器的 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timerproc:76f4fd8",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timerproc:76f4fd8")]),e("OutboundLink")],1),t._v(" 也已经被移除，目前计时器都交由处理器的网络轮询器和调度器触发，这种方式能够充分利用本地性、减少上下文的切换开销，也是目前性能最好的实现方式。")]),t._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timer")]),e("OutboundLink")],1),t._v(" 是 Go 语言计时器的内部表示，每一个计时器都存储在对应处理器的最小四叉堆中，下面是运行时计时器对应的结构体：")]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" timer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tpp puintptr\n\n\twhen     "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\tperiod   "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\tf        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\targ      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tseq      "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n\tnextwhen "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\tstatus   "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("Go")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("when")]),t._v(" — 当前计时器被唤醒的时间；")]),t._v(" "),e("li",[e("code",[t._v("period")]),t._v(" — 两次被唤醒的间隔；")]),t._v(" "),e("li",[e("code",[t._v("f")]),t._v(" — 每当计时器被唤醒时都会调用的函数；")]),t._v(" "),e("li",[e("code",[t._v("arg")]),t._v(" — 计时器被唤醒时调用 "),e("code",[t._v("f")]),t._v(" 传入的参数；")]),t._v(" "),e("li",[e("code",[t._v("nextWhen")]),t._v(" — 计时器处于 "),e("code",[t._v("timerModifiedXX")]),t._v(" 状态时，用于设置 "),e("code",[t._v("when")]),t._v(" 字段；")]),t._v(" "),e("li",[e("code",[t._v("status")]),t._v(" — 计时器的状态；")])]),t._v(" "),e("p",[t._v("然而这里的 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.timer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.timer")]),e("OutboundLink")],1),t._v(" 只是计时器运行时的私有结构体，对外暴露的计时器使用 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/time.Timer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("time.Timer")]),e("OutboundLink")],1),t._v(" 结体：")]),t._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Timer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tC "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" Time\n\tr runtimeTimer\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[e("a",{attrs:{href:"https://draveness.me/golang/tree/time.Timer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("time.Timer")]),e("OutboundLink")],1),t._v(" 计时器必须通过 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/time.NewTimer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("time.NewTimer")]),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://draveness.me/golang/tree/time.AfterFunc",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("time.AfterFunc")]),e("OutboundLink")],1),t._v(" 或者 "),e("a",{attrs:{href:"https://draveness.me/golang/tree/time.After",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("time.After")]),e("OutboundLink")],1),t._v(" 函数创建。 当计时器失效时，订阅计时器 Channel 的 Goroutine 会收到计时器失效的时间。")]),t._v(" "),e("h2",{attrs:{id:"状态机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态机"}},[t._v("#")]),t._v(" 状态机")]),t._v(" "),e("p",[t._v("运行时使用状态机的方式处理全部的计时器，其中包括 10 种状态和几种操作。由于 Go 语言的计时器需要同时支持增加、删除、修改和重置等操作，所以它的状态非常复杂，目前会包含以下 10 种可能：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("状态")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("解释")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerNoStatus")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("还没有设置状态")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerWaiting")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("等待触发")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerRunning")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("运行计时器函数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerDeleted")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被删除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerRemoving")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("正在被删除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerRemoved")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("已经被停止并从堆中删除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerModifying")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("正在被修改")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerModifiedEarlier")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被修改到了更早的时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerModifiedLater")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被修改到了更晚的时间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timerMoving")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("已经被修改正在被移动")])])])]),t._v(" "),e("p",[t._v("上述表格已经展示了不同状态的含义，但是我们还需要展示一些重要的信息，例如状态的存在时间、计时器是否在堆上等：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("timerRunning")]),t._v("、"),e("code",[t._v("timerRemoving")]),t._v("、"),e("code",[t._v("timerModifying")]),t._v(" 和 "),e("code",[t._v("timerMoving")]),t._v(" — 停留的时间都比较短；")]),t._v(" "),e("li",[e("code",[t._v("timerWaiting")]),t._v("、"),e("code",[t._v("timerRunning")]),t._v("、"),e("code",[t._v("timerDeleted")]),t._v("、"),e("code",[t._v("timerRemoving")]),t._v("、"),e("code",[t._v("timerModifying")]),t._v("、"),e("code",[t._v("timerModifiedEarlier")]),t._v("、"),e("code",[t._v("timerModifiedLater")]),t._v(" 和 "),e("code",[t._v("timerMoving")]),t._v(" — 计时器在处理器的堆上；")]),t._v(" "),e("li",[e("code",[t._v("timerNoStatus")]),t._v(" 和 "),e("code",[t._v("timerRemoved")]),t._v(" — 计时器不在堆上；")]),t._v(" "),e("li",[e("code",[t._v("timerModifiedEarlier")]),t._v(" 和 "),e("code",[t._v("timerModifiedLater")]),t._v(" — 计时器虽然在堆上，但是可能位于错误的位置上，需要重新排序；")])]),t._v(" "),e("p",[t._v("当我们操作计时器时，运行时会根据状态的不同而做出反应，所以在分析计时器时会将状态作为切入点分析其实现原理。计时器的状态机中包含如下所示的 7 种不同操作，它们分别承担了不同的职责：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.addtimer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.addtimer")]),e("OutboundLink")],1),t._v(" — 向当前处理器增加新的计时器"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:8",target:"_blank",rel:"noopener noreferrer"}},[t._v("8"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.deltimer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.deltimer")]),e("OutboundLink")],1),t._v(" — 将计时器标记成 "),e("code",[t._v("timerDeleted")]),t._v(" 删除处理器中的计时器"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:9",target:"_blank",rel:"noopener noreferrer"}},[t._v("9"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.modtimer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.modtimer")]),e("OutboundLink")],1),t._v(" — 网络轮询器会调用该函数修改计时器"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:10",target:"_blank",rel:"noopener noreferrer"}},[t._v("10"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.cleantimers",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.cleantimers")]),e("OutboundLink")],1),t._v(" — 清除队列头中的计时器，能够提升程序创建和删除计时器的性能"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:11",target:"_blank",rel:"noopener noreferrer"}},[t._v("11"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.adjusttimers",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.adjusttimers")]),e("OutboundLink")],1),t._v(" — 调整处理器持有的计时器堆，包括移动会稍后触发的计时器、删除标记为 "),e("code",[t._v("timerDeleted")]),t._v(" 的计时器"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:12",target:"_blank",rel:"noopener noreferrer"}},[t._v("12"),e("OutboundLink")],1),t._v("；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.runtimer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("runtime.runtimer")]),e("OutboundLink")],1),t._v(" — 检查队列头中的计时器，在其准备就绪时运行该计时器"),e("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/#fn:13",target:"_blank",rel:"noopener noreferrer"}},[t._v("13"),e("OutboundLink")],1),t._v("；")])]),t._v(" "),e("h2",{attrs:{id:"触发计时器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发计时器"}},[t._v("#")]),t._v(" 触发计时器")]),t._v(" "),e("p",[t._v("Go 语言会在两个模块触发计时器，运行计时器中保存的函数：")]),t._v(" "),e("ul",[e("li",[t._v("调度器调度时会检查处理器中的计时器是否准备就绪；")]),t._v(" "),e("li",[t._v("系统监控会检查是否有未执行的到期计时器；")])])])}),[],!1,null,null,null);e.default=a.exports}}]);