(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{461:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"go接口概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go接口概述"}},[t._v("#")]),t._v(" Go接口概述")]),t._v(" "),s("h3",{attrs:{id:"接口作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口作用"}},[t._v("#")]),t._v(" 接口作用")]),t._v(" "),s("p",[s("strong",[t._v("依赖解耦")])]),t._v(" "),s("p",[t._v("接口的本质是引入一个新的中间层，调用方可以通过接口与具体实现分离，解除上下游的耦合，上层的模块不再需要依赖下层的具体模块，只需要依赖一个约定好的接口。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.draveness.me/golang-interface.png",alt:"golang-interface"}})]),t._v(" "),s("p",[s("strong",[t._v("隐藏底层实现")])]),t._v(" "),s("p",[t._v("除了解耦有依赖关系的上下游，接口还能够帮助我们隐藏底层实现，减少关注点。《计算机程序的构造和解释》中有这么一句话：")]),t._v(" "),s("blockquote",[s("p",[t._v("代码必须能够被人阅读，只是机器恰好可以执行"),s("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#fn:3",target:"_blank",rel:"noopener noreferrer"}},[t._v("3"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("人能够同时处理的信息非常有限，定义良好的接口能够隔离底层的实现，让我们将重点放在当前的代码片段中。")]),t._v(" "),s("p",[t._v("例子：SQL 就是接口的一个例子，当我们使用 SQL 语句查询数据时，其实不需要关心底层数据库的具体实现，我们只在乎 SQL 返回的结果是否符合预期。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.draveness.me/2020-01-12-15787970694046-sql-and-databases.png",alt:"sql-and-databases"}})]),t._v(" "),s("h3",{attrs:{id:"接口定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口定义"}},[t._v("#")]),t._v(" 接口定义")]),t._v(" "),s("p",[t._v("定义接口需要使用 "),s("code",[t._v("interface")]),t._v(" 关键字，在接口中我们只能定义方法签名，不能包含成员变量，一个常见的 Go 语言接口是这样的：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果一个类型需要实现 "),s("code",[t._v("error")]),t._v(" 接口，那么它只需要实现 "),s("code",[t._v("Error() string")]),t._v(" 方法，下面的 "),s("code",[t._v("RPCError")]),t._v(" 结构体就是 "),s("code",[t._v("error")]),t._v(" 接口的一个实现：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" RPCError "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tCode    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\tMessage "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RPCError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s, code=%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("细心的读者可能会发现上述代码根本就没有 "),s("code",[t._v("error")]),t._v(" 接口的影子，这是为什么呢？")]),t._v(" "),s("p",[t._v("Go 语言中"),s("strong",[t._v("接口的实现都是隐式的")]),t._v("，我们只需要实现 "),s("code",[t._v("Error() string")]),t._v(" 方法就实现了 "),s("code",[t._v("error")]),t._v(" 接口。Go 语言实现接口的方式与 Java 完全不同：")]),t._v(" "),s("ul",[s("li",[t._v("在 Java 中：实现接口需要显式地声明接口并实现所有方法；")]),t._v(" "),s("li",[t._v("在 Go 中：实现接口的所有方法就隐式地实现了接口；")])]),t._v(" "),s("p",[t._v("举几个例子来演示发生接口类型检查的时机：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rpcErr "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewRPCError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unknown err"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typecheck1")]),t._v("\n\terr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AsErr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rpcErr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typecheck2")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewRPCError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("RPCError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typecheck3")]),t._v("\n\t\tCode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tMessage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" msg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AsErr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" err\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("Go 语言在"),s("a",{attrs:{href:"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译期间"),s("OutboundLink")],1),t._v("对代码进行类型检查，上述代码总共触发了三次类型检查：")]),t._v(" "),s("ol",[s("li",[t._v("将 "),s("code",[t._v("*RPCError")]),t._v(" 类型的变量赋值给 "),s("code",[t._v("error")]),t._v(" 类型的变量 "),s("code",[t._v("rpcErr")]),t._v("；")]),t._v(" "),s("li",[t._v("将 "),s("code",[t._v("*RPCError")]),t._v(" 类型的变量 "),s("code",[t._v("rpcErr")]),t._v(" 传递给签名中参数类型为 "),s("code",[t._v("error")]),t._v(" 的 "),s("code",[t._v("AsErr")]),t._v(" 函数；")]),t._v(" "),s("li",[t._v("将 "),s("code",[t._v("*RPCError")]),t._v(" 类型的变量从函数签名的返回值类型为 "),s("code",[t._v("error")]),t._v(" 的 "),s("code",[t._v("NewRPCError")]),t._v(" 函数中返回；")])]),t._v(" "),s("p",[t._v("从类型检查的过程来看，编译器仅在需要时才检查类型，类型实现接口时只需要实现接口中的全部方法，不需要像 Java 等编程语言中一样显式声明。")]),t._v(" "),s("h3",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("p",[t._v("接口也是 Go 语言中的一种类型，它能够出现在变量的定义、函数的入参和返回值中并对它们进行约束，不过 Go 语言中有两种略微不同的接口，一种是带有一组方法的接口，另一种是不带任何方法的 "),s("code",[t._v("interface{}")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.draveness.me/golang-different-interface.png",alt:"Go 语言中的两种接口"}})]),t._v(" "),s("p",[t._v("Go 语言使用 "),s("code",[t._v("runtime.iface")]),t._v(" 表示第一种接口，使用 "),s("code",[t._v("runtime.eface")]),t._v(" 表示第二种不包含任何方法的接口 "),s("code",[t._v("interface{}")]),t._v("，两种接口虽然都使用 "),s("code",[t._v("interface")]),t._v(" 声明，但是由于后者在 Go 语言中很常见，所以在实现时使用了特殊的类型。")]),t._v(" "),s("p",[s("em",[s("code",[t._v("interface{}")]),t._v(" 类型"),s("strong",[t._v("不是任意类型")]),t._v("。如果我们将类型转换成了 "),s("code",[t._v("interface{}")]),t._v(" 类型，变量在运行期间的类型也会发生变化，获取变量类型时会得到 "),s("code",[t._v("interface{}")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"指针和接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针和接口"}},[t._v("#")]),t._v(" 指针和接口")]),t._v(" "),s("p",[t._v("在 Go 语言中同时使用指针和接口时会发生一些让人困惑的问题，接口在定义一组方法时没有对实现的接收者做限制，所以我们会看到某个类型实现接口的两种方式：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.draveness.me/golang-interface-and-pointer.png",alt:"结构体和指针实现接口"}})]),t._v(" "),s("p",[t._v("这是因为结构体类型和指针类型是不同的，就像我们不能向一个接受指针的函数传递结构体一样，在实现接口时这两种类型也不能划等号。虽然两种类型不同，但是上图中的两种实现不可以同时存在，Go 语言的编译器会在结构体类型和指针类型都实现一个方法时报错"),s("code",[t._v('"method redeclared"')]),t._v("。")]),t._v(" "),s("p",[t._v("对 "),s("code",[t._v("Cat")]),t._v(" 结构体来说，它在实现接口时可以选择接受者的类型，即结构体或者结构体指针，在初始化时也可以初始化成结构体或者指针。下面的代码总结了如何使用结构体、结构体指针实现接口，以及如何使用结构体、结构体指针初始化变量。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Cat "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Duck "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c  Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Quack "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结构体实现接口")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Quack "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结构体指针实现接口")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d Duck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结构体初始化变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d Duck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结构体指针初始化变量")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("实现接口的类型和初始化返回的类型两个维度共组成了四种情况，然而这四种情况不是都能通过编译器的检查：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("结构体实现接口")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("结构体指针实现接口")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("结构体初始化变量")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("通过")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不通过")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("结构体指针初始化变量")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("通过")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("通过")])])])]),t._v(" "),s("p",[t._v("四种中只有使用指针实现接口，使用结构体初始化变量无法通过编译，其他的三种情况都可以正常执行。当实现接口的类型和初始化变量时返回的类型时相同时，代码通过编译是理所应当的：")]),t._v(" "),s("ul",[s("li",[t._v("方法接受者和初始化类型都是结构体；")]),t._v(" "),s("li",[t._v("方法接受者和初始化类型都是结构体指针；")])]),t._v(" "),s("p",[t._v("而剩下的两种方式为什么一种能够通过编译，另一种无法通过编译呢？我们先来看一下能够通过编译的情况，即方法的接受者是结构体，而初始化的变量是结构体指针：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Cat "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"meow"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c Duck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("作为指针的 "),s("code",[t._v("&Cat{}")]),t._v(" 变量能够"),s("strong",[t._v("隐式地获取")]),t._v("到指向的结构体，所以能在结构体上调用 "),s("code",[t._v("Walk")]),t._v(" 和 "),s("code",[t._v("Quack")]),t._v(" 方法。我们可以将这里的调用理解成 C 语言中的 "),s("code",[t._v("d->Walk()")]),t._v(" 和 "),s("code",[t._v("d->Speak()")]),t._v("，它们都会先获取指向的结构体再执行对应的方法。")]),t._v(" "),s("p",[t._v("但是如果我们将上述代码中方法的接受者和初始化的类型进行交换，代码就无法通过编译了：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Duck "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Cat "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"meow"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c Duck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("报错：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cannot use Cat literal "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" as "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Duck in assignment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tCat does not implement Duck "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Quack method has pointer receiver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("编译器会提醒我们："),s("code",[t._v("Cat")]),t._v(" 类型没有实现 "),s("code",[t._v("Duck")]),t._v(" 接口，"),s("code",[t._v("Quack")]),t._v(" 方法的接受者是指针。这两个报错对于刚刚接触 Go 语言的开发者比较难以理解，如果我们想要搞清楚这个问题，首先要知道 "),s("strong",[t._v("Go 语言在 传递参数 时都是传值的")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img.draveness.me/golang-interface-method-receiver.png",alt:"实现接口的接受者类型"}})]),t._v(" "),s("p",[t._v("如上图所示，无论上述代码中初始化的变量 "),s("code",[t._v("c")]),t._v(" 是 "),s("code",[t._v("Cat{}")]),t._v(" 还是 "),s("code",[t._v("&Cat{}")]),t._v("，使用 "),s("code",[t._v("c.Quack()")]),t._v(" 调用方法时都会发生值拷贝：")]),t._v(" "),s("ul",[s("li",[t._v("如上图左侧，对于 "),s("code",[t._v("&Cat{}")]),t._v(" 来说，这意味着拷贝一个新的 "),s("code",[t._v("&Cat{}")]),t._v(" 指针，这个指针与原来的指针指向一个相同并且唯一的结构体，所以编译器可以隐式的对变量解引用（dereference）获取指针指向的结构体；")]),t._v(" "),s("li",[t._v("如上图右侧，对于 "),s("code",[t._v("Cat{}")]),t._v(" 来说，这意味着 "),s("code",[t._v("Quack")]),t._v(" 方法会接受一个全新的 "),s("code",[t._v("Cat{}")]),t._v("，因为方法的参数是 "),s("code",[t._v("*Cat")]),t._v("，编译器不会无中生有创建一个新的指针；即使编译器可以创建新指针，这个指针指向的也不是最初调用该方法的结构体；")])]),t._v(" "),s("p",[t._v("上面的分析解释了指针类型的现象，"),s("strong",[t._v("当我们使用指针实现接口时，只有指针类型的变量才会实现该接口")]),t._v("；"),s("strong",[t._v("当我们使用结构体实现接口时，指针类型和结构体类型都会实现该接口")]),t._v("。当然这并不意味着我们应该一律使用结构体实现接口，这个问题在实际工程中也没那么重要，在这里我们只想解释现象背后的原因。")]),t._v(" "),s("h3",{attrs:{id:"nil-和-non-nil"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nil-和-non-nil"}},[t._v("#")]),t._v(" nil 和 non-nil")]),t._v(" "),s("p",[t._v("我们可以通过一个例子理解"),s("strong",[t._v("Go 语言的接口类型不是任意类型")]),t._v("这一句话，下面的代码在 "),s("code",[t._v("main")]),t._v(" 函数中初始化了一个 "),s("code",[t._v("*TestStruct")]),t._v(" 类型的变量，由于指针的零值是 "),s("code",[t._v("nil")]),t._v("，所以变量 "),s("code",[t._v("s")]),t._v(" 在初始化之后也是 "),s("code",[t._v("nil")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TestStruct "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NilOrNot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TestStruct\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #=> true")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NilOrNot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #=> false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("结果：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" run main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("我们简单总结一下上述代码执行的结果：")]),t._v(" "),s("ul",[s("li",[t._v("将上述变量与 "),s("code",[t._v("nil")]),t._v(" 比较会返回 "),s("code",[t._v("true")]),t._v("；")]),t._v(" "),s("li",[t._v("将上述变量传入 "),s("code",[t._v("NilOrNot")]),t._v(" 方法并与 "),s("code",[t._v("nil")]),t._v(" 比较会返回 "),s("code",[t._v("false")]),t._v("；")])]),t._v(" "),s("p",[t._v("出现上述现象的原因是 —— 调用 "),s("code",[t._v("NilOrNot")]),t._v(" 函数时发生了"),s("strong",[t._v("隐式的类型转换")]),t._v("，除了向方法传入参数之外，变量的赋值也会触发隐式类型转换。在类型转换时，"),s("code",[t._v("*TestStruct")]),t._v(" 类型会转换成 "),s("code",[t._v("interface{}")]),t._v(" 类型，转换后的变量不仅包含转换前的变量，还包含变量的类型信息 "),s("code",[t._v("TestStruct")]),t._v("，所以转换后的变量与 "),s("code",[t._v("nil")]),t._v(" 不相等。")]),t._v(" "),s("h2",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("p",[t._v("Go 语言根据接口类型是否包含一组方法将接口类型分成了两类：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.iface")]),s("OutboundLink")],1),t._v(" 结构体表示包含方法的接口")]),t._v(" "),s("li",[t._v("使用 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.eface")]),s("OutboundLink")],1),t._v(" 结构体表示不包含任何方法的 "),s("code",[t._v("interface{}")]),t._v(" 类型；")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.eface",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.eface")]),s("OutboundLink")],1),t._v(" 结构体在 Go 语言中的定义是这样的：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" eface "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16 字节")]),t._v("\n\t_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type\n\tdata  unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("由于 "),s("code",[t._v("interface{}")]),t._v(" 类型不包含任何方法，所以它的结构也相对来说比较简单，只包含指向底层数据和类型的两个指针。从上述结构我们也能推断出 — Go 语言的任意类型都可以转换成 "),s("code",[t._v("interface{}")]),t._v("。")]),t._v(" "),s("p",[t._v("另一个用于表示接口的结构体是 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.iface",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.iface")]),s("OutboundLink")],1),t._v("，这个结构体中有指向原始数据的指针 "),s("code",[t._v("data")]),t._v("，不过更重要的是 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.itab")]),s("OutboundLink")],1),t._v(" 类型的 "),s("code",[t._v("tab")]),t._v(" 字段。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" iface "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16 字节")]),t._v("\n\ttab  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("itab\n\tdata unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"类型结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型结构体"}},[t._v("#")]),t._v(" 类型结构体")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime._type")]),s("OutboundLink")],1),t._v(" 是 Go 语言类型的运行时表示。下面是运行时包中的结构体，其中包含了很多类型的元信息，例如：类型的大小、哈希、对齐以及种类等。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" _type "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsize       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n\tptrdata    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n\thash       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n\ttflag      tflag\n\talign      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n\tfieldAlign "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n\tkind       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n\tequal      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tgcdata     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\tstr        nameOff\n\tptrToThis  typeOff\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("size")]),t._v(" 字段存储了类型占用的内存空间，为内存空间的分配提供信息；")]),t._v(" "),s("li",[s("code",[t._v("hash")]),t._v(" 字段能够帮助我们快速确定类型是否相等；")]),t._v(" "),s("li",[s("code",[t._v("equal")]),t._v(" 字段用于判断当前类型的多个对象是否相等，该字段是为了减少 Go 语言二进制包大小从 "),s("code",[t._v("typeAlg")]),t._v(" 结构体中迁移过来的"),s("a",{attrs:{href:"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#fn:4",target:"_blank",rel:"noopener noreferrer"}},[t._v("4"),s("OutboundLink")],1),t._v("；")])]),t._v(" "),s("p",[t._v("我们只需要对 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime._type")]),s("OutboundLink")],1),t._v(" 结构体中的字段有一个大体的概念，不需要详细理解所有字段的作用和意义。")]),t._v(" "),s("h3",{attrs:{id:"itab-结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#itab-结构体"}},[t._v("#")]),t._v(" itab 结构体")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.itab")]),s("OutboundLink")],1),t._v(" 结构体是接口类型的核心组成部分，每一个 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.itab",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime.itab")]),s("OutboundLink")],1),t._v(" 都占 32 字节，我们可以将其看成接口类型和具体类型的组合，它们分别用 "),s("code",[t._v("inter")]),t._v(" 和 "),s("code",[t._v("_type")]),t._v(" 两个字段表示：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" itab "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32 字节")]),t._v("\n\tinter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("interfacetype\n\t_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type\n\thash  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\tfun   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("除了 "),s("code",[t._v("inter")]),t._v(" 和 "),s("code",[t._v("_type")]),t._v(" 两个用于表示类型的字段之外，上述结构体中的另外两个字段也有自己的作用：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("hash")]),t._v(" 是对 "),s("code",[t._v("_type.hash")]),t._v(" 的拷贝，当我们想将 "),s("code",[t._v("interface")]),t._v(" 类型转换成具体类型时，可以使用该字段快速判断目标类型和具体类型 "),s("a",{attrs:{href:"https://draveness.me/golang/tree/runtime._type",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("runtime._type")]),s("OutboundLink")],1),t._v(" 是否一致；")]),t._v(" "),s("li",[s("code",[t._v("fun")]),t._v(" 是一个动态大小的数组，它是一个用于动态派发的虚函数表，存储了一组函数指针。虽然该变量被声明成大小固定的数组，但是在使用时会通过原始指针获取其中的数据，所以 "),s("code",[t._v("fun")]),t._v(" 数组中保存的元素数量是不确定的；")])]),t._v(" "),s("h2",{attrs:{id:"动态派发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态派发"}},[t._v("#")]),t._v(" 动态派发")]),t._v(" "),s("p",[t._v("动态派发（Dynamic dispatch）是在运行期间选择具体多态操作（方法或者函数）执行的过程，它是面向对象语言中的常见特性。Go 语言虽然不是严格意义上的面向对象语言，但是接口的引入为它带来了动态派发这一特性，调用接口类型的方法时，如果编译期间不能确认接口的类型，Go 语言会在运行期间决定具体调用该方法的哪个实现。")]),t._v(" "),s("p",[t._v("在如下所示的代码中，"),s("code",[t._v("main")]),t._v(" 函数调用了两次 "),s("code",[t._v("Quack")]),t._v(" 方法：")]),t._v(" "),s("ol",[s("li",[t._v("第一次以 "),s("code",[t._v("Duck")]),t._v(" 接口类型的身份调用，调用时需要经过运行时的动态派发；")]),t._v(" "),s("li",[t._v("第二次以 "),s("code",[t._v("*Cat")]),t._v(" 具体类型的身份调用，编译期就会确定调用的函数：")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c Duck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"draven"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Cat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Quack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("直接调用方法需要消耗时间的平均值和使用指针实现接口时差不多，约为 ~3.09ns，而使用动态派发调用方法却需要 ~6.98ns 相比直接调用额外消耗了 ~125% 的时间，从生成的汇编指令我们也能看出后者的额外开销会高很多。")]),t._v(" "),s("p",[t._v("直接调用和动态派发的性能对比：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("直接调用")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("动态派发")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("指针")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("~3.03ns")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("~3.58ns")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("结构体")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("~3.09ns")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("~6.98ns")])])])]),t._v(" "),s("p",[t._v("从上述表格我们可以看到使用结构体实现接口带来的开销会大于使用指针实现，而动态派发在结构体上的表现非常差，这也提醒我们应当 "),s("strong",[t._v("尽量避免使用结构体类型实现接口")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("使用结构体带来的巨大性能差异不只是接口带来的问题，带来性能问题主要因为 Go 语言在函数调用时是传值的，动态派发的过程只是放大了参数拷贝带来的影响")]),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);