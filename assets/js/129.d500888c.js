(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{560:function(s,t,a){"use strict";a.r(t);var e=a(3),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis常见的数据结构-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis常见的数据结构-数据类型"}},[s._v("#")]),s._v(" Redis常见的数据结构（数据类型）")]),s._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("h3",{attrs:{id:"基本介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("String是Redis最基本的类型，一个key对应一个value，"),t("strong",[s._v("一个Redis中字符串value最多可以是512M")]),s._v("。")]),s._v(" "),t("p",[s._v("String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。")]),s._v(" "),t("p",[s._v("使用场景：常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。")]),s._v(" "),t("h3",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("p",[s._v("String的数据结构为"),t("strong",[s._v("简单动态字符串")]),s._v("(Simple Dynamic String，缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用"),t("strong",[s._v("预分配冗余空间的方式来减少内存的频繁分配")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091645431.png",alt:"String数据结构"}})]),s._v(" "),t("p",[s._v("如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。")]),s._v(" "),t("p",[s._v("当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。")]),s._v(" "),t("h3",{attrs:{id:"编码方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码方式"}},[s._v("#")]),s._v(" 编码方式")]),s._v(" "),t("p",[s._v("对于"),t("code",[s._v("string")]),s._v("类型的字符串，其底层编码方式共有三种，分别为"),t("code",[s._v("int")]),s._v("、"),t("code",[s._v("embstr")]),s._v("和"),t("code",[s._v("raw")]),s._v("。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("int")]),s._v("：当存储的字符串全是数字时，此时使用"),t("code",[s._v("int")]),s._v("方式来存储；")]),s._v(" "),t("li",[t("code",[s._v("embstr")]),s._v("：当存储的字符串长度小于44个字符时，此时使用"),t("code",[s._v("embstr")]),s._v("方式来存储；")]),s._v(" "),t("li",[t("code",[s._v("raw")]),s._v("：当存储的字符串长度大于44个字符时，此时使用"),t("code",[s._v("raw")]),s._v("方式来存储；")])]),s._v(" "),t("p",[s._v("使用"),t("code",[s._v("object encoding key")]),s._v("可以查看"),t("code",[s._v("key")]),s._v("对应的"),t("code",[s._v("encoding")]),s._v("类型。")]),s._v(" "),t("h2",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-2"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它是单键多值的。")]),s._v(" "),t("p",[s._v("它的底层实际是个"),t("strong",[s._v("双向链表")]),s._v("，"),t("strong",[s._v("对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091645367.png",alt:"image-20211109164542487"}})]),s._v(" "),t("p",[t("strong",[s._v("应用场景:")]),s._v(" 发布与订阅或者说消息队列、慢查询。")]),s._v(" "),t("h3",{attrs:{id:"数据结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-2"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("p",[s._v("List的数据结构为快速链表quickList。")]),s._v(" "),t("ul",[t("li",[s._v("首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。")]),s._v(" "),t("li",[s._v("当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091647949.png",alt:"image-20211109164705085"}})]),s._v(" "),t("p",[s._v("Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。")]),s._v(" "),t("h4",{attrs:{id:"linkedlist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[s._v("#")]),s._v(" linkedList")]),s._v(" "),t("p",[s._v("与"),t("code",[s._v("Java")]),s._v("中的"),t("code",[s._v("LinkedList")]),s._v("类似，"),t("code",[s._v("Redis")]),s._v("中的"),t("code",[s._v("linkedList")]),s._v("是一个双向链表，也是由一个个节点组成的。"),t("code",[s._v("Redis")]),s._v("中借助"),t("code",[s._v("C")]),s._v("语言实现的链表节点结构如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//定义链表节点的结构体 \ntypedf struct listNode{\n    //前一个节点\n    struct listNode *prev;\n    //后一个节点\n    struct listNode *next;\n    //当前节点的值的指针\n    void *value;\n}listNode;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("code",[s._v("pre")]),s._v("指向前一个节点，"),t("code",[s._v("next")]),s._v("指针指向后一个节点，"),t("code",[s._v("value")]),s._v("保存着当前节点对应的数据对象。"),t("code",[s._v("listNode")]),s._v("的示意图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091749843.png",alt:"img"}})]),s._v(" "),t("p",[s._v("链表的结构如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedf struct list{\n    //头指针\n    listNode *head;\n    //尾指针\n    listNode *tail;\n    //节点拷贝函数\n    void *(*dup)(void *ptr);\n    //释放节点函数\n    void *(*free)(void *ptr);\n    //判断两个节点是否相等的函数\n    int (*match)(void *ptr,void *key);\n    //链表长度\n    unsigned long len;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("code",[s._v("head")]),s._v("指向链表的头节点，"),t("code",[s._v("tail")]),s._v("指向链表的尾节点，"),t("code",[s._v("dup")]),s._v("函数用于链表转移复制时对节点"),t("code",[s._v("value")]),s._v("拷贝的一个实现，一般情况下使用"),t("strong",[s._v("等号")]),s._v("足以，但在某些特殊情况下可能会用到节点转移函数，默认可以给这个函数赋值"),t("code",[s._v("NULL")]),s._v("即表示使用等号进行节点转移。"),t("code",[s._v("free")]),s._v("函数用于释放一个节点所占用的内存空间，默认赋值"),t("code",[s._v("NULL")]),s._v("的话，即使用"),t("code",[s._v("Redis")]),s._v("自带的"),t("code",[s._v("zfree")]),s._v("函数进行内存空间释放。"),t("code",[s._v("match")]),s._v("函数是用来比较两个链表节点的"),t("code",[s._v("value")]),s._v("值是否相等，相等返回1，不等返回0。"),t("code",[s._v("len")]),s._v("表示这个链表共有多少个节点，这样就可以在"),t("code",[s._v("O(1)")]),s._v("的时间复杂度内获得链表的长度。")]),s._v(" "),t("p",[s._v("链表的结构如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091750815.png",alt:"img"}})]),s._v(" "),t("h4",{attrs:{id:"ziplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ziplist"}},[s._v("#")]),s._v(" ZipList")]),s._v(" "),t("p",[t("code",[s._v("Redis")]),s._v("的"),t("code",[s._v("zipList")]),s._v("结构如下所示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ziplist")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//压缩列表占用字符数")]),s._v("\n    int32 zlbytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//最后一个元素距离起始位置的偏移量，用于快速定位最后一个节点")]),s._v("\n    int32 zltail_offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元素个数")]),s._v("\n    int16 zllength"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元素内容")]),s._v("\n    T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" entries"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结束位 0xFF")]),s._v("\n    int8 zlend"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ziplist\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("code",[s._v("zipList")]),s._v("的结构如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091737927.png",alt:"ziplist"}})]),s._v(" "),t("p",[s._v("注意到"),t("code",[s._v("zltail_offset")]),s._v("这个参数，有了这个参数就可以快速定位到最后一个"),t("code",[s._v("entry")]),s._v("节点的位置，然后开始倒序遍历，也就是说"),t("code",[s._v("zipList")]),s._v("支持双向遍历。")]),s._v(" "),t("p",[s._v("下面是"),t("code",[s._v("entry")]),s._v("的结构：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typede struct entry{\n    //前一个entry的长度\n    int<var> prelen;\n    //元素类型编码\n    int<var> encoding;\n    //元素内容\n    optional byte[] content;\n}entry\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("code",[s._v("prelen")]),s._v("保存的是前一个"),t("code",[s._v("entry")]),s._v("节点的长度，这样在倒序遍历时就可以通过这个参数定位到上一个"),t("code",[s._v("entry")]),s._v("的位置。"),t("code",[s._v("encoding")]),s._v("保存了"),t("code",[s._v("content")]),s._v("的编码类型。"),t("code",[s._v("content")]),s._v("则是保存的元素内容，它是"),t("code",[s._v("optional")]),s._v("类型的，表示这个字段是可选的。当"),t("code",[s._v("content")]),s._v("是很小的整数时，它会内联到"),t("code",[s._v("content")]),s._v("字段的尾部。"),t("code",[s._v("entry")]),s._v("结构的示意图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091738937.png",alt:"entry"}})]),s._v(" "),t("p",[s._v("好了，那现在我们思考一个问题，为什么有了"),t("code",[s._v("linkedList")]),s._v("还有设计一个"),t("code",[s._v("zipList")]),s._v("呢？就像"),t("code",[s._v("zipList")]),s._v("的名字一样，它是一个压缩列表，是为了节约内存而开发的。相比于"),t("code",[s._v("linkedList")]),s._v("，其少了"),t("code",[s._v("pre")]),s._v("和"),t("code",[s._v("next")]),s._v("两个指针。在"),t("code",[s._v("Redis")]),s._v("中，"),t("code",[s._v("pre")]),s._v("和"),t("code",[s._v("next")]),s._v("指针就要占用16个字节（64位系统的一个指针就是8个字节）。另外，"),t("code",[s._v("linkedList")]),s._v("的每个节点的内存都是单独分配，加剧内存的碎片化，影响内存的管理效率。与之相对的是，"),t("code",[s._v("zipList")]),s._v("是由连续的内存组成的，这样一来，由于内存是连续的，就减少了许多内存碎片和指针的内存占用，进而节约了内存。")]),s._v(" "),t("p",[t("code",[s._v("zipList")]),s._v("遍历时，先根据"),t("code",[s._v("zlbytes")]),s._v("和"),t("code",[s._v("zltail_offset")]),s._v("定位到最后一个"),t("code",[s._v("entry")]),s._v("的位置，然后再根据最后一个"),t("code",[s._v("entry")]),s._v("里的"),t("code",[s._v("prelen")]),s._v("时确定前一个"),t("code",[s._v("entry")]),s._v("的位置。")]),s._v(" "),t("p",[t("strong",[s._v("连锁更新")])]),s._v(" "),t("p",[s._v("上面说到了，"),t("code",[s._v("entry")]),s._v("中有一个"),t("code",[s._v("prelen")]),s._v("字段，它的长度要么是1个字节，要么都是5个字节：")]),s._v(" "),t("ul",[t("li",[s._v("前一个节点的长度小于254个字节，则"),t("code",[s._v("prelen")]),s._v("长度为1字节；")]),s._v(" "),t("li",[s._v("前一个节点的长度大于254字节，则"),t("code",[s._v("prelen")]),s._v("长度为5字节；")])]),s._v(" "),t("p",[s._v("假设现在有一组压缩列表，长度都在250~253字节之间，突然新增一个"),t("code",[s._v("entry")]),s._v("节点，这个"),t("code",[s._v("entry")]),s._v("节点长度大于等于254字节。由于新的"),t("code",[s._v("entry")]),s._v("节点大于等于254字节，这个"),t("code",[s._v("entry")]),s._v("节点的"),t("code",[s._v("prelen")]),s._v("为5个字节，随后会导致其余的所有"),t("code",[s._v("entry")]),s._v("节点的"),t("code",[s._v("prelen")]),s._v("增大为5字节。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091740545.png",alt:"连锁更新"}})]),s._v(" "),t("p",[s._v("同样地，删除操作也会导致出现"),t("strong",[s._v("连锁更新")]),s._v("这种情况，假设在某一时刻，插入一个长度大于等于254个字节的"),t("code",[s._v("entry")]),s._v("节点，同时删除其后面的一个长度小于254个字节的"),t("code",[s._v("entry")]),s._v("节点，由于小于254的"),t("code",[s._v("entry")]),s._v("节点的删除，大于等于254个字节的"),t("code",[s._v("entry")]),s._v("节点将会与后面小于254个字节的"),t("code",[s._v("entry")]),s._v("节点相连，此时就与新增一个长度大于等于254个字节的"),t("code",[s._v("entry")]),s._v("节点时的情况一样，将会发生连续更新。发生连续更新时，"),t("code",[s._v("Redis")]),s._v("需要不断地对压缩列表进行"),t("strong",[s._v("内存分配工作")]),s._v("，直到结束。")]),s._v(" "),t("h4",{attrs:{id:"quicklist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[s._v("#")]),s._v(" quickList")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("Redis")]),s._v("3.2版本之后，"),t("code",[s._v("list")]),s._v("的底层实现方式又多了一种，"),t("code",[s._v("quickList")]),s._v("。"),t("code",[s._v("qucikList")]),s._v("是由"),t("code",[s._v("zipList")]),s._v("和双向链表"),t("code",[s._v("linkedList")]),s._v("组成的混合体。它将"),t("code",[s._v("linkedList")]),s._v("按段切分，每一段使用"),t("code",[s._v("zipList")]),s._v("来紧凑存储，多个"),t("code",[s._v("zipList")]),s._v("之间使用双向指针串接起来。示意图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091743491.png",alt:"quicklist"}})]),s._v(" "),t("p",[s._v("节点"),t("code",[s._v("quickListNode")]),s._v("的定义如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("quicklistNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//前一个节点")]),s._v("\n    quicklistNode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" prev"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后一个节点")]),s._v("\n    quicklistNode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//压缩列表")]),s._v("\n    ziplist"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" zl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ziplist大小")]),s._v("\n    int32 size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ziplist 中元素数量")]),s._v("\n    int16 count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编码形式 存储 ziplist 还是进行 LZF 压缩储存的zipList")]),s._v("\n    int2 encoding"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("quickListNode\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("code",[s._v("quickList")]),s._v("的定义如下所示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("quicklist")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向头结点")]),s._v("\n    quicklistNode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向尾节点")]),s._v("\n    quicklistNode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元素总数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//quicklistNode节点的个数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nodes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//压缩算法深度")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" compressDepth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("quickList\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("上述代码简单地表示了"),t("code",[s._v("quickList")]),s._v("的大致结构，为了进一步节约空间，"),t("code",[s._v("Redis")]),s._v("还会对"),t("code",[s._v("zipList")]),s._v("进行压缩存储，使用"),t("strong",[s._v("LZF")]),s._v("算法进行压缩，可以选择压缩深度。")]),s._v(" "),t("h4",{attrs:{id:"每个ziplist可以存储多少个元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每个ziplist可以存储多少个元素"}},[s._v("#")]),s._v(" 每个zipList可以存储多少个元素？")]),s._v(" "),t("p",[s._v("想要了解这个问题，就得打开"),t("code",[s._v("redis.conf")]),s._v("文件了。在"),t("code",[s._v("DVANCED CONFIG")]),s._v("下面有着清晰的记载。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# Lists are also encoded in a special way to save a lot of space.\n# The number of entries allowed per internal list node can be specified\n# as a fixed maximum size or a maximum number of elements.\n# For a fixed maximum size, use -5 through -1, meaning:\n# -5: max size: 64 Kb  <-- not recommended for normal workloads\n# -4: max size: 32 Kb  <-- not recommended\n# -3: max size: 16 Kb  <-- probably not recommended\n# -2: max size: 8 Kb   <-- good\n# -1: max size: 4 Kb   <-- good\n# Positive numbers mean store up to _exactly_ that number of elements\n# per list node.\n# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),\n# but if your use case is unique, adjust the settings as necessary.\nlist-max-ziplist-size -2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("code",[s._v("quickList")]),s._v("内部默认单个"),t("code",[s._v("zipList")]),s._v("长度为"),t("strong",[s._v("8k")]),s._v("字节，即"),t("code",[s._v("list-max-ziplist-size")]),s._v("的值设置为**-2**，超出了这个阈值，就会重新生成一个"),t("code",[s._v("zipList")]),s._v("来存储数据。根据注释可知，性能最好的时候就是就是"),t("code",[s._v("list-max-ziplist-size")]),s._v("为**-1"),t("strong",[s._v("和")]),s._v("-2**，即分别是"),t("strong",[s._v("4kb和8kb")]),s._v("的时候，当然，这个值也可以被设置为正数，当"),t("code",[s._v("list-max-ziplist-szie")]),s._v("为"),t("strong",[s._v("正数n")]),s._v("时，表示每个"),t("code",[s._v("quickList")]),s._v("节点上的"),t("code",[s._v("zipList")]),s._v("最多包含"),t("strong",[s._v("n个")]),s._v("数据项。")]),s._v(" "),t("h4",{attrs:{id:"压缩深度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#压缩深度"}},[s._v("#")]),s._v(" 压缩深度")]),s._v(" "),t("p",[s._v("上面提到过，"),t("code",[s._v("quickList")]),s._v("中可以使用压缩算法对"),t("code",[s._v("zipList")]),s._v("进行进一步的压缩，这个算法就是**"),t("a",{attrs:{href:"https://blog.csdn.net/u012319493/article/details/83653860",target:"_blank",rel:"noopener noreferrer"}},[s._v("LZF算法"),t("OutboundLink")],1),s._v("**，这是一种无损压缩算法，具体可以参考上面的链接。使用压缩算法对"),t("code",[s._v("zipList")]),s._v("进行压缩后，"),t("code",[s._v("zipList")]),s._v("的结构如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedf struct ziplist_compressed{\n    //元素个数\n    int32 size;\n    //元素内容\n    byte[] compressed_data\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("此时"),t("code",[s._v("quickList")]),s._v("的示意图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091748141.png",alt:"img"}}),s._v("]")]),s._v(" "),t("p",[s._v("当然，在"),t("code",[s._v("redis.conf")]),s._v("文件中的"),t("code",[s._v("DVANCED CONFIG")]),s._v("下面也可以对压缩深度进行配置。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# Lists may also be compressed.\n# Compress depth is the number of quicklist ziplist nodes from *each* side of\n# the list to *exclude* from compression.  The head and tail of the list\n# are always uncompressed for fast push/pop operations.  Settings are:\n# 0: disable all list compression\n# 1: depth 1 means \"don't start compressing until after 1 node into the list,\n#    going from either the head or tail\"\n#    So: [head]->node->node->...->node->[tail]\n#    [head], [tail] will always be uncompressed; inner nodes will compress.\n# 2: [head]->[next]->node->node->...->node->[prev]->[tail]\n#    2 here means: don't compress head or head->next or tail->prev or tail,\n#    but compress all nodes between them.\n# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]\n# etc.\nlist-compress-depth 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("code",[s._v("list-compress-depth")]),s._v("这个参数表示**一个"),t("code",[s._v("quickList")]),s._v("两端不被压缩的节点个数。**需要注意的是，这里的节点个数是指"),t("code",[s._v("quicklist")]),s._v("双向链表的节点个数，而不是指"),t("code",[s._v("ziplist")]),s._v("里面的数据项个数。实际上，一个"),t("code",[s._v("quicklist")]),s._v("节点上的"),t("code",[s._v("ziplist")]),s._v("，如果被压缩，就是整体被压缩的。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("quickList")]),s._v("默认的压缩深度为"),t("strong",[s._v("0")]),s._v("，也就是不开启压缩")]),s._v(" "),t("li",[s._v("当"),t("code",[s._v("list-compress-depth")]),s._v("为1，表示"),t("code",[s._v("quickList")]),s._v("的两端各有1个节点不进行压缩，中间结点进行压缩；")]),s._v(" "),t("li",[s._v("当"),t("code",[s._v("list-compress-depth")]),s._v("为2，表示"),t("code",[s._v("quickList")]),s._v("的首尾2个节点不进行压缩，中间结点进行压缩；")]),s._v(" "),t("li",[s._v("以此类推")])]),s._v(" "),t("p",[s._v("从上面可以看出，对于"),t("code",[s._v("quickList")]),s._v("来说，其首尾两个节点永远不会被压缩。")]),s._v(" "),t("h2",{attrs:{id:"hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-3"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的 "),t("code",[s._v("Map<String,Object>")])]),s._v(" "),t("p",[s._v("用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储，主要如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Crsw%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211109165533101.png",alt:"image-20211109165533101"}})]),s._v(" "),t("p",[t("strong",[s._v("应用场景:")]),s._v(" 系统中对象数据的存储。")]),s._v(" "),t("h3",{attrs:{id:"数据结构-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-3"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("p",[s._v("Hash类型对应的数据结构是两种：ziplist（压缩列表），dict（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用dict。")]),s._v(" "),t("h3",{attrs:{id:"dict"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[s._v("#")]),s._v(" Dict")]),s._v(" "),t("p",[s._v("字典"),t("code",[s._v("dict")]),s._v("作为一种常用的数据结构，"),t("code",[s._v("C")]),s._v("语言内部并不具备，因而"),t("code",[s._v("Redis")]),s._v("的开发人员自己设计和开发了"),t("code",[s._v("Redis")]),s._v("中的"),t("code",[s._v("dict")]),s._v("结构。")]),s._v(" "),t("h4",{attrs:{id:"dict-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dict-2"}},[s._v("#")]),s._v(" dict")]),s._v(" "),t("p",[s._v("其定义如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dict")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    dictType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类型特定函数，包括一些自定义函数，这些函数使得key和")]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//value能够存储")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("private"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//私有数据")]),s._v("\n    dictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//两张hash表 ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rehashidx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//rehash索引，字典没有进行rehash时，此值为-1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" iterators"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//正在迭代的迭代器数量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("type")]),s._v("和"),t("code",[s._v("private")]),s._v("这两个属性是为了实现字典多态而设置的，当字典中存放着不同类型的值，对应的一些复制，比较函数也不一样，这两个属性配合起来可以实现多态的方法调用；")]),s._v(" "),t("li",[t("code",[s._v("ht[2]")]),s._v("，两个"),t("code",[s._v("hash")]),s._v("表")]),s._v(" "),t("li",[t("code",[s._v("rehashidx")]),s._v("，这是一个辅助变量，用于记录"),t("code",[s._v("rehash")]),s._v("过程的进度，以及是否正在进行"),t("code",[s._v("rehash")]),s._v("等信息，当此值为**-1**时，表示该"),t("code",[s._v("dict")]),s._v("此时没有"),t("code",[s._v("rehash")]),s._v("过程")]),s._v(" "),t("li",[t("code",[s._v("iterators")]),s._v("，记录此时"),t("code",[s._v("dict")]),s._v("有几个迭代器正在进行遍历过程")])]),s._v(" "),t("h4",{attrs:{id:"dictht"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dictht"}},[s._v("#")]),s._v(" "),t("strong",[s._v("dictht")])]),s._v(" "),t("p",[s._v("由上面可以看出，"),t("code",[s._v("dict")]),s._v("本质上是对哈希表"),t("code",[s._v("dictht")]),s._v("的一个简单封装，"),t("code",[s._v("dictht")]),s._v("的定义如下所示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    dictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//存储数据的数组 二维")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//数组的大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizemask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表的大小的掩码，用于计算索引值，总是等于 ")]),s._v("\n                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//size-1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" used"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//// 哈希表中中元素个数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("dictht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("code",[s._v("table")]),s._v("是一个"),t("code",[s._v("dictEntry")]),s._v("类型的数组，用于真正存储数据；"),t("code",[s._v("size")]),s._v("表示"),t("code",[s._v("table")]),s._v("这个数组的大小；"),t("code",[s._v("sizemask")]),s._v("用于计算索引位置，且总是等于"),t("code",[s._v("size-1")]),s._v("；"),t("code",[s._v("used")]),s._v("表示"),t("code",[s._v("dictht")]),s._v("中已有的节点数量，其示意图如下所示：\n"),t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091726815.png",alt:"img"}})]),s._v(" "),t("h4",{attrs:{id:"dictentry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dictentry"}},[s._v("#")]),s._v(" "),t("strong",[s._v("dictEntry")])]),s._v(" "),t("p",[s._v("上面分析"),t("code",[s._v("dictht")]),s._v("时说到，真正存储数据的结构是"),t("code",[s._v("dictEntry")]),s._v("数组，其结构定义如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("typedf "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//键")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("unit64_t")]),s._v(" u64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int64_t")]),s._v(" s64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next；"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向下一个节点的指针")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("dictEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("其示意图如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091727359.png",alt:"image-20200831175713878"}})]),s._v(" "),t("p",[s._v("最后整个"),t("code",[s._v("dict")]),s._v("的结构示意图如上所示：")]),s._v(" "),t("p",[s._v("上图是一个没有处于"),t("code",[s._v("rehash")]),s._v("状态下的字典"),t("code",[s._v("dict")]),s._v("，整个"),t("code",[s._v("dict")]),s._v("中有两个哈希表"),t("code",[s._v("dictht")]),s._v("，其中一个哈希表存储数据，另一个哈希表为空。")]),s._v(" "),t("h4",{attrs:{id:"扩容和缩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容和缩容"}},[s._v("#")]),s._v(" "),t("strong",[s._v("扩容和缩容")])]),s._v(" "),t("p",[s._v("当哈希表中元素数量逐渐增加时，此时产生"),t("code",[s._v("hash冲突")]),s._v("的概率逐渐增大，且由于"),t("code",[s._v("dict")]),s._v("也是采用"),t("strong",[s._v("拉链法")]),s._v("解决"),t("code",[s._v("hash冲突")]),s._v("的，随着"),t("code",[s._v("hash冲突")]),s._v("概率上升，链表会越来越长，这就会导致查找效率下降。相反，当元素不断减少时，元素占用"),t("code",[s._v("dict")]),s._v("的空间就越少，出于对内存的极致利用，此时就需要进行缩容操作。")]),s._v(" "),t("p",[s._v("既然说到扩容和缩容，熟悉"),t("code",[s._v("Java")]),s._v("集合的小伙伴是不是想到了什么。不错，那就是"),t("strong",[s._v("负载因子")]),s._v("。"),t("strong",[s._v("负载因子一般用于描述集合当前被填充的程度")]),s._v("。在"),t("code",[s._v("Redis")]),s._v("的字典"),t("code",[s._v("dict")]),s._v("中，"),t("strong",[s._v("负责因子=哈希表中已保存节点数量/哈希表的大小")]),s._v("，即：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("load factor = ht[0].used / ht[0].size\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("Redis")]),s._v("中，三条关于扩容和缩容的规则：")]),s._v(" "),t("ul",[t("li",[s._v("没有执行BGSAVE和BGREWRITEAOF指令的情况下，哈希表的负载因子大于等于1时进行扩容；")]),s._v(" "),t("li",[s._v("正在执行BGSAVE和BGREWRITEAOF指令的情况下，哈希表的负载因大于等于5时进行扩容；")]),s._v(" "),t("li",[s._v("负载因子小于0.1时，"),t("code",[s._v("Redis")]),s._v("自动开始对哈希表进行收缩操作；")])]),s._v(" "),t("p",[s._v("其中，扩容和缩容的数量大小也有一定的规则：")]),s._v(" "),t("ul",[t("li",[s._v("扩容："),t("strong",[s._v("扩容后的"),t("code",[s._v("dictEntry")]),s._v("数组数量为第一个大于等于"),t("code",[s._v("ht[0].used*2")]),s._v("的"),t("code",[s._v("2^n")])]),s._v("；")]),s._v(" "),t("li",[s._v("缩容："),t("strong",[s._v("缩容后的"),t("code",[s._v("dictEntry")]),s._v("数组数量为第一个大于等于"),t("code",[s._v("ht[0].used")]),s._v("的"),t("code",[s._v("2^n")])]),s._v("；")])]),s._v(" "),t("h2",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-4"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以"),t("strong",[s._v("自动排重")]),s._v("的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。")]),s._v(" "),t("p",[s._v("Redis的Set是string类型的无序集合。它 "),t("strong",[s._v("底层其实是一个value为null的hash表")]),s._v(" ，所以添加，删除，查找的 "),t("strong",[s._v("复杂度都是O(1)")]),s._v("。")]),s._v(" "),t("p",[s._v("使用场景：可以基于 set 轻易实现"),t("strong",[s._v("交集、并集、差集")]),s._v("的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。")]),s._v(" "),t("h3",{attrs:{id:"数据结构-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-4"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("p",[s._v("Set数据结构是dict字典，字典是用哈希表实现的。")]),s._v(" "),t("p",[s._v("Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。")]),s._v(" "),t("h2",{attrs:{id:"zset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" ZSet")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-5"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个"),t("strong",[s._v("评分")]),s._v("（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。"),t("strong",[s._v("集合的成员是唯一的，但是评分可以是重复的")]),s._v(" 。")]),s._v(" "),t("p",[s._v("因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。")]),s._v(" "),t("p",[s._v("访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。")]),s._v(" "),t("p",[t("strong",[s._v("应用场景：")]),s._v(" 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。")]),s._v(" "),t("h3",{attrs:{id:"数据结构-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-5"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),t("p",[s._v("SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构 "),t("code",[s._v("Map<String, Double>")]),s._v("，可以给每一个元素value赋予一个权重score，另一方面它又类似于"),t("code",[s._v("TreeSet")]),s._v("，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。")]),s._v(" "),t("p",[s._v("zset底层使用了两个数据结构：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。")])]),s._v(" "),t("li",[t("p",[s._v("跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。")])])]),s._v(" "),t("p",[s._v("zset也有两种不同的实现，分别是"),t("code",[s._v("zipList")]),s._v("和"),t("code",[s._v("skipList")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("zipList：满足以下两个条件\n"),t("ul",[t("li",[t("code",[s._v("[score,value]")]),s._v("键值对数量少于128个；")]),s._v(" "),t("li",[s._v("每个元素的长度小于64字节；")])])]),s._v(" "),t("li",[s._v("skipList：不满足以上两个条件时使用跳表、组合了hash和skipList\n"),t("ul",[t("li",[t("code",[s._v("hash")]),s._v("用来存储"),t("code",[s._v("value")]),s._v("到"),t("code",[s._v("score")]),s._v("的映射，这样就可以在"),t("code",[s._v("O(1)")]),s._v("时间内找到"),t("code",[s._v("value")]),s._v("对应的分数；")]),s._v(" "),t("li",[t("code",[s._v("skipList")]),s._v("按照"),t("strong",[s._v("从小到大")]),s._v("的顺序存储分数")]),s._v(" "),t("li",[t("code",[s._v("skipList")]),s._v("每个元素的值都是"),t("code",[s._v("[socre,value]")]),s._v("对")])])])]),s._v(" "),t("h3",{attrs:{id:"跳跃表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跳跃表"}},[s._v("#")]),s._v(" 跳跃表")]),s._v(" "),t("p",[s._v("有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。")]),s._v(" "),t("p",[s._v("Redis采用的是跳跃表。跳表可以保证增、删、查等操作时的时间复杂度为"),t("code",[s._v("O(logN)")]),s._v("，这个性能可以与平衡树相媲美，但实现方式上却更加简单，唯一美中不足的就是跳表占用的空间比较大，其实就是一种"),t("strong",[s._v("空间换时间")]),s._v("的思想。")]),s._v(" "),t("p",[s._v("实例：对比有序链表和跳跃表，从链表中查询出51")]),s._v(" "),t("p",[s._v("（1）  有序链表：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091711455.png",alt:"image-20211109171136112"}})]),s._v(" "),t("p",[s._v("要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。")]),s._v(" "),t("p",[s._v("（2）  跳跃表")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111091712526.png",alt:"image-20211109171219713"}})]),s._v(" "),t("ul",[t("li",[s._v("从第2层开始，1节点比51节点小，向后比较。")]),s._v(" "),t("li",[s._v("21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层")]),s._v(" "),t("li",[s._v("在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下")]),s._v(" "),t("li",[s._v("在第0层，51节点为要查找的节点，节点被找到，共查找4次。")])]),s._v(" "),t("p",[s._v("从此可以看出跳跃表比有序链表效率要高。")]),s._v(" "),t("h2",{attrs:{id:"bitmaps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitmaps"}},[s._v("#")]),s._v(" Bitmaps")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-6"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111002687.png",alt:"image-20211111100250796"}})]),s._v(" "),t("p",[s._v("合理地使用操作位能够有效地提高内存使用率和开发效率。")]),s._v(" "),t("p",[s._v("Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：")]),s._v(" "),t("p",[s._v("（1）  Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。")]),s._v(" "),t("p",[s._v("（2）  Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111003757.png",alt:"image-20211111100301872"}})]),s._v(" "),t("h3",{attrs:{id:"相关命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关命令"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),t("h4",{attrs:{id:"_1、setbit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、setbit"}},[s._v("#")]),s._v(" 1、setbit")]),s._v(" "),t("p",[s._v("设置Bitmaps中某个偏移量的值（0或1）(offset:偏移量从0开始)")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("setbit"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("offset"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。")]),s._v(" "),t("p",[s._v("设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111005756.png",alt:"image-20211111100540833"}})]),s._v(" "),t("p",[s._v("unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111006438.png",alt:"image-20211111100601628"}})]),s._v(" "),t("blockquote",[t("p",[s._v("很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。")]),s._v(" "),t("p",[s._v("在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。")])]),s._v(" "),t("h4",{attrs:{id:"_2、getbit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、getbit"}},[s._v("#")]),s._v(" 2、getbit")]),s._v(" "),t("p",[s._v("获取Bitmaps中某个偏移量的值（偏移量不存在，也是返回0）")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("getbit"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("offset"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"_3、bitcount"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、bitcount"}},[s._v("#")]),s._v(" 3、bitcount")]),s._v(" "),t("p",[s._v("统计"),t("strong",[s._v("字符串")]),s._v("被设置为1的bit数。")]),s._v(" "),t("p",[s._v("一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计字符串从start字节到end字节比特值为1的数量")]),s._v("\nbitcount"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"_4、bitop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、bitop"}},[s._v("#")]),s._v(" 4、bitop")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("bitop and"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("or/not/xor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("destkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key…"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。")]),s._v(" "),t("p",[s._v("实例：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2020-11-04 日访问网站的userid=1,2,5,9。")]),s._v("\nsetbit unique:users:20201104 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201104 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201104 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201104 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2020-11-03 日访问网站的userid=0,1,4,9。")]),s._v("\nsetbit unique:users:20201103 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201103 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201103 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsetbit unique:users:20201103 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("计算出两天都访问过网站的用户数量:"),t("code",[s._v("bitop and unique:users:20201103 unique:users:20201104")])]),s._v(" "),t("p",[s._v("计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集："),t("code",[s._v("bitop or unique:users:20201103 unique:users:20201104")])]),s._v(" "),t("h3",{attrs:{id:"bitmaps与set对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitmaps与set对比"}},[s._v("#")]),s._v(" Bitmaps与set对比")]),s._v(" "),t("p",[s._v("假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111015921.png",alt:"image-20211111101502391"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111015690.png",alt:"image-20211111101542846"}})]),s._v(" "),t("p",[s._v("很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的。")]),s._v(" "),t("p",[s._v("但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111016925.png",alt:"image-20211111101625476"}})]),s._v(" "),t("h2",{attrs:{id:"hyperloglog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[s._v("#")]),s._v(" HyperLogLog")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-7"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。")]),s._v(" "),t("p",[s._v("但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种 "),t("strong",[s._v("求集合中不重复元素个数")]),s._v(" 的问题称为 "),t("strong",[s._v("基数")]),s._v(" 问题。解决基数问题有很多种方案：")]),s._v(" "),t("p",[s._v("（1）数据存储在MySQL表中，使用distinct count计算不重复个数")]),s._v(" "),t("p",[s._v("（2）使用Redis提供的hash、set、bitmaps等数据结构来处理")]),s._v(" "),t("p",[s._v("以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。")]),s._v(" "),t("p",[s._v("**能否能够降低一定的精度来平衡存储空间？**Redis推出了HyperLogLog")]),s._v(" "),t("p",[s._v("Redis HyperLogLog 是用来做基数统计的算法，"),t("strong",[s._v("HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。")])]),s._v(" "),t("p",[s._v("在 Redis 里面，"),t("strong",[s._v("每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数")]),s._v("。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。")]),s._v(" "),t("p",[s._v("但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")]),s._v(" "),t("p",[t("strong",[s._v("什么是基数?")])]),s._v(" "),t("p",[s._v("比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。")]),s._v(" "),t("h3",{attrs:{id:"相关命令-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关命令-2"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),t("h4",{attrs:{id:"_1、pfadd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、pfadd"}},[s._v("#")]),s._v(" 1、pfadd")]),s._v(" "),t("p",[s._v("添加指定元素到 HyperLogLog 中")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("pfadd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("element "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202111111021159.png",alt:"image-20211111102059470"}})]),s._v(" "),t("h4",{attrs:{id:"_2、pfcount"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、pfcount"}},[s._v("#")]),s._v(" 2、pfcount")]),s._v(" "),t("p",[t("strong",[s._v("计算HLL的近似基数")]),s._v("，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("pfcount"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"_3、pfmerge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、pfmerge"}},[s._v("#")]),s._v(" 3、pfmerge")]),s._v(" "),t("p",[s._v("将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("pfmerge"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("destkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("sourcekey"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sourcekey "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"geospatial"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#geospatial"}},[s._v("#")]),s._v(" Geospatial")]),s._v(" "),t("h3",{attrs:{id:"基本介绍-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-8"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),t("p",[s._v("Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。")]),s._v(" "),t("h3",{attrs:{id:"相关命令-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关命令-3"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("命令")]),s._v(" "),t("th",{staticStyle:{"text-align":"left"}},[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3687.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEOHASH 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("返回一个或多个位置元素的 Geohash 表示")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3688.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEOPOS 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("从key里返回所有给定位置元素的位置（经度和纬度）")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3686.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEODIST 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("返回两个给定位置之间的距离")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3689.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEORADIUS 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("以给定的经纬度为中心， 找出某一半径内的元素")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3685.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEOADD 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("将指定的地理空间位置（纬度、经度、名称）添加到指定的key中")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://www.redis.net.cn/order/3690.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis GEORADIUSBYMEMBER 命令"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[s._v("找出位于指定范围内的元素，中心点是由给定的位置元素决定")])])])]),s._v(" "),t("h2",{attrs:{id:"参看"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参看"}},[s._v("#")]),s._v(" 参看：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1Rv41177Af?p=4",target:"_blank",rel:"noopener noreferrer"}},[s._v("【尚硅谷】Redis 6 入门到精通 超详细 教程"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/reecelin/p/13358432.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis底层数据结构之List"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/reecelin/p/13362104.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis底层数据结构之hash"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/reecelin/p/13352694.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis底层数据结构之string"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/reecelin/p/13364089.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis底层数据结构之set"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/reecelin/p/13368374.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis底层数据结构之 zset"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);