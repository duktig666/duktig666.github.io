(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{469:function(v,_,r){"use strict";r.r(_);var t=r(3),o=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("谈到 Go 语言调度器，我们绕不开的是操作系统、进程与线程这些概念，线程是操作系统调度时的最基本单元，而 Linux 在调度器并不区分进程和线程的调度，它们在不同操作系统上也有不同的实现，但是在大多数的实现中线程都属于进程。")]),v._v(" "),_("p",[v._v("多个线程可以属于同一个进程并共享内存空间。因为多线程不需要创建新的虚拟内存空间，所以它们也不需要内存管理单元处理上下文的切换，线程之间的通信也正是基于共享的内存进行的，与重量级的进程相比，线程显得比较轻量。")]),v._v(" "),_("p",[v._v("虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1M 以上的内存空间，在切换线程时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间"),_("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1",target:"_blank",rel:"noopener noreferrer"}},[v._v("1"),_("OutboundLink")],1),v._v("，"),_("strong",[v._v("但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销")]),_("a",{attrs:{href:"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:2",target:"_blank",rel:"noopener noreferrer"}},[v._v("2"),_("OutboundLink")],1),v._v("。")]),v._v(" "),_("p",[v._v("Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。")]),v._v(" "),_("h2",{attrs:{id:"设计原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计原理"}},[v._v("#")]),v._v(" 设计原理")]),v._v(" "),_("p",[v._v("今天的 Go 语言调度器有着优异的性能，但是如果我们回头看 Go 语言的 0.x 版本的调度器会发现最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能，历史上几个不同版本的调度器引入了不同的改进，也存在着不同的缺陷:")]),v._v(" "),_("ul",[_("li",[v._v("单线程调度器 ·0.x\n"),_("ul",[_("li",[v._v("只包含 40 多行代码；")]),v._v(" "),_("li",[v._v("程序中只能存在一个活跃线程，由 G-M 模型组成；")])])]),v._v(" "),_("li",[v._v("多线程调度器 ·1.0\n"),_("ul",[_("li",[v._v("允许运行多线程的程序；")]),v._v(" "),_("li",[v._v("全局锁导致竞争严重；")])])]),v._v(" "),_("li",[v._v("任务窃取调度器 ·1.1\n"),_("ul",[_("li",[v._v("引入了处理器 P，构成了目前的 "),_("strong",[v._v("G-M-P")]),v._v(" 模型；")]),v._v(" "),_("li",[v._v("在处理器 P 的基础上实现了基于"),_("strong",[v._v("工作窃取")]),v._v("的调度器；")]),v._v(" "),_("li",[v._v("在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；")]),v._v(" "),_("li",[v._v("时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；")])])]),v._v(" "),_("li",[v._v("抢占式调度器 ·1.2~ 至今\n"),_("ul",[_("li",[v._v("基于协作的抢占式调度器 - 1.2 ~ 1.13\n"),_("ul",[_("li",[v._v("通过编译器在函数调用时插入"),_("strong",[v._v("抢占检查")]),v._v("指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；")]),v._v(" "),_("li",[v._v("Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；")])])]),v._v(" "),_("li",[v._v("基于信号的抢占式调度器 - 1.14 ~ 至今\n"),_("ul",[_("li",[v._v("实现"),_("strong",[v._v("基于信号的真抢占式调度")]),v._v("；")]),v._v(" "),_("li",[v._v("垃圾回收在扫描栈时会触发抢占调度；")]),v._v(" "),_("li",[v._v("抢占的时间点不够多，还不能覆盖全部的边缘情况；")])])])])]),v._v(" "),_("li",[v._v("非均匀存储访问调度器 · 提案\n"),_("ul",[_("li",[v._v("对运行时的各种资源进行分区；")]),v._v(" "),_("li",[v._v("实现非常复杂，到今天还没有提上日程；")])])])]),v._v(" "),_("p",[v._v("除了多线程、任务窃取和抢占式调度器之外，Go 语言社区目前还有一个非均匀存储访问（Non-uniform memory access，NUMA）调度器的提案。在这一节中，我们将依次介绍不同版本调度器的实现原理以及未来可能会实现的调度器提案。")]),v._v(" "),_("h2",{attrs:{id:"gmp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gmp"}},[v._v("#")]),v._v(" GMP")]),v._v(" "),_("p",[v._v("处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 "),_("code",[v._v("runq")]),v._v("，还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行。如下所示的图片展示了 Go 语言中的线程 M、处理器 P 和 Goroutine 的关系。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img.draveness.me/2020-02-02-15805792666151-golang-gmp.png",alt:"golang-gmp"}})]),v._v(" "),_("p",[v._v("运行时调度器的三个重要组成部分 — 线程 M、Goroutine G 和处理器 P：")]),v._v(" "),_("ol",[_("li",[v._v("G — 表示 Goroutine，它是一个待执行的任务；")]),v._v(" "),_("li",[v._v("M — 表示操作系统的线程，它由操作系统的调度器调度和管理；")]),v._v(" "),_("li",[v._v("P — 表示处理器，它可以被看做运行在线程上的本地调度器；")])]),v._v(" "),_("h3",{attrs:{id:"g"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g"}},[v._v("#")]),v._v(" G")]),v._v(" "),_("p",[v._v("Goroutine 是 Go 语言调度器中待执行的任务，它在运行时调度器中的地位与线程在操作系统中差不多，但是它占用了更小的内存空间，也降低了上下文切换的开销。")]),v._v(" "),_("p",[v._v("Goroutine 只存在于 Go 语言的运行时，它是 "),_("strong",[v._v("Go 语言在用户态提供的线程")]),v._v("，作为一种粒度更细的资源调度单元，如果使用得当能够在高并发的场景下"),_("strong",[v._v("更高效地利用机器的 CPU")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"m"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#m"}},[v._v("#")]),v._v(" M")]),v._v(" "),_("p",[v._v("Go 语言并发模型中的 M 是操作系统线程。调度器最多可以创建 10000 个线程，但是其中大多数的线程都不会执行用户代码（可能陷入系统调用），最多只会有 "),_("code",[v._v("GOMAXPROCS")]),v._v(" 个活跃线程能够正常运行。")]),v._v(" "),_("p",[v._v("在默认情况下，运行时会将 "),_("code",[v._v("GOMAXPROCS")]),v._v(" 设置成当前机器的核数，我们也可以在程序中使用 "),_("a",{attrs:{href:"https://draveness.me/golang/tree/runtime.GOMAXPROCS",target:"_blank",rel:"noopener noreferrer"}},[_("code",[v._v("runtime.GOMAXPROCS")]),_("OutboundLink")],1),v._v(" 来改变最大的活跃线程数。")]),v._v(" "),_("h3",{attrs:{id:"p"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#p"}},[v._v("#")]),v._v(" P")]),v._v(" "),_("p",[v._v("调度器中的处理器 P 是线程和 Goroutine 的中间层，它能提供线程需要的上下文环境，也会负责调度线程上的等待队列，通过处理器 P 的调度，每一个内核线程都能够执行多个 Goroutine，它能在 Goroutine 进行一些 I/O 操作时及时让出计算资源，提高线程的利用率。")]),v._v(" "),_("p",[v._v("因为调度器在启动时就会创建 "),_("code",[v._v("GOMAXPROCS")]),v._v(" 个处理器，所以 Go 语言程序的处理器数量一定会等于 "),_("code",[v._v("GOMAXPROCS")]),v._v("，这些处理器会绑定到不同的内核线程上。")])])}),[],!1,null,null,null);_.default=o.exports}}]);