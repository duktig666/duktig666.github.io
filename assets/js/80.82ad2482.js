(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{508:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程基础"}},[t._v("#")]),t._v(" 线程基础")]),t._v(" "),a("h2",{attrs:{id:"线程暂停"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程暂停"}},[t._v("#")]),t._v(" 线程暂停")]),t._v(" "),a("h1",{attrs:{id:"对象及变量的并发访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象及变量的并发访问"}},[t._v("#")]),t._v(" 对象及变量的并发访问")]),t._v(" "),a("h2",{attrs:{id:"什么是线程安全问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程安全问题"}},[t._v("#")]),t._v(" 什么是线程安全问题？")]),t._v(" "),a("p",[t._v("线程安全指的是获取实例变量的值是经过同步处理的，不会出现脏读现象。")]),t._v(" "),a("p",[t._v("非线程安全指的是多线程对同一个对象的实例变量并发访问时，可能出现脏读，即读到的数据可能是修改过的。")]),t._v(" "),a("h2",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" synchronized")]),t._v(" "),a("h3",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[a("strong",[t._v("同步语句块")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("synchronized")]),t._v(" 同步语句块"),a("code",[t._v("monitorenter")]),t._v(" 指令指向同步代码块的开始位置，"),a("code",[t._v("monitorexit")]),t._v(" 指令则指明同步代码块的结束位置；")]),t._v(" "),a("li",[t._v("当执行 "),a("code",[t._v("monitorenter")]),t._v(" 指令时，线程试图获取锁也就是获取 "),a("strong",[t._v("对象监视器 "),a("code",[t._v("monitor")])]),t._v(" 的持有权。")]),t._v(" "),a("li",[t._v("在执行"),a("code",[t._v("monitorenter")]),t._v("时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。.")]),t._v(" "),a("li",[t._v("在执行 "),a("code",[t._v("monitorexit")]),t._v(" 指令后，将锁计数器设为 0，表明锁被释放。")])]),t._v(" "),a("p",[a("strong",[t._v("同步方法")])]),t._v(" "),a("p",[t._v("JVM 通过 "),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。")]),t._v(" "),a("h3",{attrs:{id:"重点注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点注意事项"}},[t._v("#")]),t._v(" "),a("strong",[t._v("重点注意事项")])]),t._v(" "),a("ol",[a("li",[t._v("关键字"),a("code",[t._v("synchronized")]),t._v("获取的锁是"),a("strong",[t._v("对象锁")]),t._v("。")]),t._v(" "),a("li",[t._v("只有共享资源的读写访问才需要加锁。")]),t._v(" "),a("li",[t._v("支持继承效果的可重入锁")]),t._v(" "),a("li",[t._v("出现异常，锁自动释放")]),t._v(" "),a("li",[t._v("加锁访问时的注意事项\n"),a("ol",[a("li",[t._v("对象锁"),a("code",[t._v("synchronized")]),t._v("方法同步等待，可异步访问非"),a("code",[t._v("synchronized")]),t._v("方法")]),t._v(" "),a("li",[t._v("如果使用同步代码块非"),a("code",[t._v("this")]),t._v("对象，则"),a("code",[t._v("synchronized(非this)")]),t._v("与同步方法是异步的（因为有两把锁）")]),t._v(" "),a("li",[a("code",[t._v("synchronized")]),t._v("作用在"),a("code",[t._v("static")]),t._v("方法上，相当于使用当前静态方法所在类对应的Class类的单例对象加锁")]),t._v(" "),a("li",[a("code",[t._v("synchronized")]),t._v("修饰静态方法和"),a("code",[t._v("synchronized(class)")]),t._v("对类的所有实例对象起作用")]),t._v(" "),a("li",[a("code",[t._v("synchronized(String)")]),t._v("要注意常量池带来的影响")])])]),t._v(" "),a("li",[a("code",[t._v("println()")]),t._v("方法是同步的，加入了"),a("code",[t._v("synchronized")]),t._v("代码块。")])]),t._v(" "),a("h2",{attrs:{id:"多线程的死锁问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程的死锁问题"}},[t._v("#")]),t._v(" 多线程的死锁问题？")]),t._v(" "),a("h3",{attrs:{id:"什么是死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是死锁"}},[t._v("#")]),t._v(" 什么是死锁？")]),t._v(" "),a("blockquote",[a("p",[t._v("不同的线程都在等待根本不可能被释放的锁，从而导致所有的任务都无法继续完成。")])]),t._v(" "),a("h3",{attrs:{id:"java中如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中如何解决"}},[t._v("#")]),t._v(" Java中如何解决？")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("jps")]),t._v("命令查询线程id")]),t._v(" "),a("li",[a("code",[t._v("jstack -l 线程id")]),t._v(" 进行死锁检测")])]),t._v(" "),a("p",[t._v("设计程序时要避免双方互相持有对方的锁，只要相互等待对方释放锁，就有可能出现死锁。")]),t._v(" "),a("h2",{attrs:{id:"判断指定对象是否持有锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断指定对象是否持有锁"}},[t._v("#")]),t._v(" 判断指定对象是否持有锁")]),t._v(" "),a("p",[t._v("如下方法可判断当前线程的指定对象是否持有锁。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("holdsLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("holdsLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"volatile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" volatile")]),t._v(" "),a("p",[a("code",[t._v("volatile")]),t._v("保证可见性，不能保证原子性，禁止指令重排。")]),t._v(" "),a("h3",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("p",[t._v("可见性：A线程更改变量的值后，B线程马上就能看到更改后的变量的值，提高了软件的灵敏度。")]),t._v(" "),a("p",[t._v("原子性：一组操作要么全部执行，要么全部不执行。")]),t._v(" "),a("p",[t._v("有序性（禁止指令重排）：代码执行过程中保证先后顺序。Java在编译器及运行期间的优化，代码执行的顺序不一定是编写的顺序。")]),t._v(" "),a("h3",{attrs:{id:"可见性原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性原理"}},[t._v("#")]),t._v(" 可见性原理")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("将当前处理器缓存行的数据写回到系统内存")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效")]),t._v("。缓存一致性协议，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/2021/06/18/1624000135.png",alt:"使用volatile前"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/2021/06/18/1624000201.png",alt:"使用volatile后"}})]),t._v(" "),a("h3",{attrs:{id:"指令重排原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令重排原理"}},[t._v("#")]),t._v(" 指令重排原理")]),t._v(" "),a("p",[a("strong",[t._v("volatile中会加一道内存的屏障，这个内存屏障可以保证在这个屏障中的指令顺序。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/koala010/typora/raw/master/img/image-20200814100613459.png",alt:"禁止指令重排"}})]),t._v(" "),a("h3",{attrs:{id:"volatile-int-i-不能保证原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile-int-i-不能保证原子性"}},[t._v("#")]),t._v(" "),a("code",[t._v("volatile int i++")]),t._v("不能保证原子性")]),t._v(" "),a("p",[a("code",[t._v("i++")]),t._v("要经过三步操作：")]),t._v(" "),a("ol",[a("li",[t._v("从内存中取出i的值")]),t._v(" "),a("li",[t._v("计算i的值")]),t._v(" "),a("li",[t._v("将i的值写到内存中")])]),t._v(" "),a("h3",{attrs:{id:"volatile和synchronized区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile和synchronized区别"}},[t._v("#")]),t._v(" volatile和synchronized区别")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("volatile")]),t._v("不能保证原子性，"),a("code",[t._v("synchronized")]),t._v("可以")]),t._v(" "),a("li",[t._v("使用场景\n"),a("ol",[a("li",[a("code",[t._v("volatile")]),t._v("：实现一个变量值被修改，其他线程可以获取最新值的时候。")]),t._v(" "),a("li",[a("code",[t._v("synchronized")]),t._v("：多线程对同一个对象的同一个实例变量操作时，避免线程安全问题。")])])])]),t._v(" "),a("h1",{attrs:{id:"线程间通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程间通信"}},[t._v("#")]),t._v(" 线程间通信")]),t._v(" "),a("h2",{attrs:{id:"wait-notify机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wait-notify机制"}},[t._v("#")]),t._v(" wait/notify机制")]),t._v(" "),a("blockquote",[a("p",[t._v("可以使用"),a("code",[t._v("while")]),t._v("和"),a("code",[t._v("sleep")]),t._v("来实现线程通信，但是需要通过"),a("code",[t._v("while")]),t._v("循环一直判断条件，浪费cpu资源。并且"),a("code",[t._v("sleep")]),t._v("不释放锁。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("wait")]),t._v("使当前线程释放锁，然后从运行状态变为wait状态，等待被唤醒。\n"),a("ul",[a("li",[a("code",[t._v("wait(long)")]),t._v("：超过这个时间则该线程自动唤醒（运行的前提是"),a("strong",[t._v("再次持有锁")]),t._v("，"),a("strong",[t._v("若没有获得锁——等待")]),t._v("）。")])])]),t._v(" "),a("li",[a("code",[t._v("notify")]),t._v("按照wait方法执行的顺序唤醒等待同一个锁的线程，使其从wait状态变为运行状态。")]),t._v(" "),a("li",[a("code",[t._v("notifyAll")]),t._v("按照执行wait方法相反的顺序依次唤醒全部线程。")])]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("ol",[a("li",[t._v("只能在同步方法/同步块中使用，需要线程持有相同的锁。")]),t._v(" "),a("li",[a("code",[t._v("wait")]),t._v("使线程暂停执行并立即释放锁，"),a("code",[t._v("notify")]),t._v("按wait方法执行顺序通知一个暂停的线程继续运行，"),a("code",[t._v("notifyAll")]),t._v("按照wait方法的逆序依次唤醒全部线程。")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("notify")]),t._v("后，线程不会立马释放锁，呈"),a("code",[t._v("wait")]),t._v("状态的线程也不会立马获取锁，需要等"),a("code",[t._v("notify")]),t._v("方法执行完，退出同步区域。")]),t._v(" "),a("li",[a("strong",[t._v("wait/notify机制")]),t._v("最经典的应用场景是"),a("strong",[t._v("生产者/消费者模式")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("wait")]),t._v("条件变化，有必要使用"),a("code",[t._v("while")]),t._v("循环（替换"),a("code",[t._v("if")]),t._v("判断）。")]),t._v(" "),a("li",[t._v("避免"),a("strong",[t._v("假死问题")]),t._v("，将"),a("code",[t._v("notify")]),t._v("改为"),a("code",[t._v("notifyAll")]),t._v("（原因：有可能连续唤醒同类线程，比如连续唤醒消费者）。")])]),t._v(" "),a("h2",{attrs:{id:"join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join()")]),t._v(" "),a("h3",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),a("p",[t._v("主线程创建并启动子线程，但子线要进行大量耗时的运算，主线程将早于子线程完成，如果需要主线程等待子线程完成后再结束，此时可以使用"),a("code",[t._v("join()")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("排队运行（类似于同步），等待线程对象销毁。")]),t._v(" "),a("p",[t._v("线程x正常执行"),a("code",[t._v("run")]),t._v("方法，使当前线程z阻塞，等待线程x执行完销毁后再继续执行线程z后边的代码，具有串联执行的效果。")]),t._v(" "),a("h3",{attrs:{id:"join和synchronized的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join和synchronized的区别"}},[t._v("#")]),t._v(" join和synchronized的区别")]),t._v(" "),a("p",[t._v("join使用wait进行同步等待")]),t._v(" "),a("p",[t._v("synchronized使用锁来进行同步")]),t._v(" "),a("h3",{attrs:{id:"join-2000-和sleep-2000-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join-2000-和sleep-2000-的区别"}},[t._v("#")]),t._v(" join(2000)和sleep(2000)的区别")]),t._v(" "),a("p",[a("code",[t._v("join(2000)")]),t._v("内部使用"),a("code",[t._v("wait")]),t._v("，会立即释放锁。而"),a("code",[t._v("sleep")]),t._v("不会释放锁。")]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("join(long)")]),t._v("设置指定的等待时间，不管线程x是否执行完毕，时间到了且获取到了锁，当前线程向后执行代码。如果没有获得锁，则一直尝试获得锁。")]),t._v(" "),a("li",[t._v("在执行"),a("code",[t._v("join")]),t._v("方法中，如果当前线程被中断，则会报"),a("code",[t._v("InterruptedException")]),t._v("异常。")])]),t._v(" "),a("h2",{attrs:{id:"threadlocal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[t._v("#")]),t._v(" ThreadLocal")]),t._v(" "),a("p",[t._v("参看："),a("RouterLink",{attrs:{to:"/java/thread/深入解析ThreadLocal.html"}},[t._v("深入解析ThreadLocal.md")])],1),t._v(" "),a("h1",{attrs:{id:"lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[t._v("#")]),t._v(" Lock")]),t._v(" "),a("h2",{attrs:{id:"reetrantlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reetrantlock"}},[t._v("#")]),t._v(" ReetrantLock")]),t._v(" "),a("h3",{attrs:{id:"reetrantlock-实现wait-notify模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reetrantlock-实现wait-notify模式"}},[t._v("#")]),t._v(" "),a("code",[t._v("ReetrantLock")]),t._v(" 实现"),a("code",[t._v("wait/notify")]),t._v("模式")]),t._v(" "),a("ol",[a("li",[t._v("借助"),a("code",[t._v("Condition")]),t._v("对象\n"),a("ol",[a("li",[a("code",[t._v("await()")]),t._v("类似于"),a("code",[t._v("wait()")]),t._v("：使当前线程在接到通知或被中断之前一直处于等待wait状态。")]),t._v(" "),a("li",[a("code",[t._v("signal()")]),t._v("类似于"),a("code",[t._v("Object")]),t._v("类中的"),a("code",[t._v("notify()")])]),t._v(" "),a("li",[a("code",[t._v("signalAll()")]),t._v("类似于"),a("code",[t._v("Object")]),t._v("类中的"),a("code",[t._v("notifyAll()")])])])]),t._v(" "),a("li",[t._v("必须要在"),a("code",[t._v("condition.await")]),t._v("之前调用"),a("code",[t._v("lock.lock()")]),t._v("，否则会抛出异常"),a("code",[t._v("IllegalMonitorStateException")]),t._v("。")]),t._v(" "),a("li",[t._v("多路通知通能（选择性通知）：一个"),a("code",[t._v("Lock")]),t._v("可以创建多个"),a("code",[t._v("Condition")]),t._v("实例，线程对象注册在指定的"),a("code",[t._v("Condition")]),t._v("中，可以选择性地进行线程通知。\n"),a("ol",[a("li",[a("code",[t._v("notify/notifyAll")]),t._v("，被通知的线程有JVM进行选择，"),a("code",[t._v("notifyAll")]),t._v("会通知所有的waiting线程，没有选择权，会有很大的效率问题。")]),t._v(" "),a("li",[a("code",[t._v("Condition")]),t._v("对象的作用是控制并处理线程状态，可以使线程呈wait状态，也可以让线程继续运行。")])])])]),t._v(" "),a("h3",{attrs:{id:"contidion-await-方法暂停线程运行的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contidion-await-方法暂停线程运行的原理"}},[t._v("#")]),t._v(" "),a("code",[t._v("Contidion.await()")]),t._v("方法暂停线程运行的原理")]),t._v(" "),a("p",[t._v("源代码内部执行了"),a("code",[t._v("Unsafe")]),t._v("类中的"),a("code",[t._v("public native void park(boolean isAbsolute,long time)")]),t._v("方法，让当前线程呈暂停状态。")]),t._v(" "),a("p",[a("code",[t._v("isAbsolute")]),t._v("代表是否为绝对时间，为"),a("code",[t._v("true")]),t._v("，第二个"),a("code",[t._v("time")]),t._v("值代表毫秒；为"),a("code",[t._v("false")]),t._v("，第二个"),a("code",[t._v("time")]),t._v("值代表纳秒。")]),t._v(" "),a("h3",{attrs:{id:"一个condition对象和多个condition对象有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个condition对象和多个condition对象有什么区别"}},[t._v("#")]),t._v(" 一个"),a("code",[t._v("Condition")]),t._v("对象和多个"),a("code",[t._v("Condition")]),t._v("对象有什么区别？")]),t._v(" "),a("p",[t._v("如果需要唤醒部分线程的场景时，就需要创建多个"),a("code",[t._v("Condition")]),t._v("对象了。")]),t._v(" "),a("h3",{attrs:{id:"公平锁和非公平锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公平锁和非公平锁"}},[t._v("#")]),t._v(" 公平锁和非公平锁")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("公平锁")]),t._v("：采用"),a("strong",[t._v("先到先得")]),t._v("的策略，每次获取锁时都会检查队列里有没有排队等待的线程，没有才尝试获取锁，如果有就将当前线程追加到队列中。")]),t._v(" "),a("p",[a("strong",[t._v("非公平锁")]),t._v("：采用有机会插队的策略，一个线程获取锁之前要先尝试获取锁而不是在队列中等待，如果获取锁成功，则说明线程虽然是后启动的，但先获得了锁，这就是“作弊插队”的效果。如果没有获取锁成功，那么将自身追加到队列中进行等待。")])]),t._v(" "),a("h3",{attrs:{id:"reetrantlock常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reetrantlock常用方法"}},[t._v("#")]),t._v(" ReetrantLock常用方法")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询当前线程保持此锁的个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHoldCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回正等待获取此锁的线程估计数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueueLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回等待与此锁相关联的给定条件Condition的线程数的估计数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWaitQueueLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询给定线程是否等待获取此锁（也就是判断参数中的线程是否在等待队列中）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasQueuedThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询是否有线程等待获取此锁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasQueuedThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询是否线程有等待与此锁相关联的Condition条件（是否有线程执行了condition对象的await()方法）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasWaiters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询此锁是否由当前线程持有")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isHeldByCurrentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询此锁是否由当前线程持有")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isLocked")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取锁定，除非当前线程是 interrupted （抛InterruptedException）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lockInterruptibly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嗅探拿锁，如果当前线程发现锁被其他线程持有，返回false，程序继续向后执行而不是阻塞")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程在等待过程中，不允许被中断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitUninterruptibly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br")])]),a("h3",{attrs:{id:"线程交替执行任务-线程按顺序执行业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程交替执行任务-线程按顺序执行业务"}},[t._v("#")]),t._v(" 线程交替执行任务 / 线程按顺序执行业务")]),t._v(" "),a("p",[a("code",[t._v("wait/notify")]),t._v("机制，"),a("code",[t._v("while")]),t._v("循环进行判断")]),t._v(" "),a("p",[t._v("伪代码：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法1")]),t._v("\nlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nnext"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行业务")]),t._v("\ncondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法2")]),t._v("\nlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nnext"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行业务")]),t._v("\ncondition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("h2",{attrs:{id:"reetrantreadwritelock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reetrantreadwritelock"}},[t._v("#")]),t._v(" ReetrantReadWriteLock")]),t._v(" "),a("h3",{attrs:{id:"为什么要有reetrantreadwritelock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有reetrantreadwritelock"}},[t._v("#")]),t._v(" 为什么要有"),a("code",[t._v("ReetrantReadWriteLock")]),t._v("？")]),t._v(" "),a("p",[a("code",[t._v("ReetrantLock")]),t._v(" 类完全互斥排他，同一时间只能有一个线程执行"),a("code",[t._v("lock()")]),t._v("后面的任务，虽然保证了同时写实例变量的线程安全，但是效率非常低下。")]),t._v(" "),a("p",[a("code",[t._v("ReetrantReadWriteLock")]),t._v("，可以在读时加共享锁，在写时加排它锁，保证线程安全。")]),t._v(" "),a("p",[a("strong",[t._v("读读不互斥，读写互斥，写写互斥")]),t._v("。")]),t._v(" "),a("h1",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h2",{attrs:{id:"线程状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[t._v("#")]),t._v(" 线程状态")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202109221715061.png",alt:"线程状态-《Java多线程编程核心技术（第二版）》"}})]),t._v(" "),a("ul",[a("li",[t._v("线程状态"),a("code",[t._v("TIMED_WAITING")]),t._v("代表线程执行了"),a("code",[t._v("Thread.sleep()")]),t._v("方法，呈等待状态。")]),t._v(" "),a("li",[a("code",[t._v("BLOCKED")]),t._v("状态出现在某个线程在等待锁的时候。")]),t._v(" "),a("li",[a("code",[t._v("WAITING")]),t._v("状态是线程执行了"),a("code",[t._v("Thread.wait()")]),t._v("方法后所处的状态。")])]),t._v(" "),a("h2",{attrs:{id:"线程组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程组"}},[t._v("#")]),t._v(" 线程组")]),t._v(" "),a("p",[t._v("呈树形结构，一个线程组既可以有线程，也可以有线程组。")]),t._v(" "),a("p",[t._v("目的：批量管理线程组/线程对象。")]),t._v(" "),a("h2",{attrs:{id:"线程的异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的异常处理"}},[t._v("#")]),t._v(" 线程的异常处理")]),t._v(" "),a("p",[t._v("对线程进行异常处理，需要对每一个线程的"),a("code",[t._v("run()")]),t._v("方法使用"),a("code",[t._v("catch")]),t._v("语句，会造成代码冗余。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("setUncaughtExceptionHandler()")]),t._v("是给指定线程对象设置的异常处理器。")]),t._v(" "),a("li",[a("code",[t._v("setDefaultUncaughtExceptionHandler()")]),t._v("方法对所有线程对象设置异常处理器。")])]),t._v(" "),a("p",[t._v("线程异常的优先级：")]),t._v(" "),a("p",[t._v("调用"),a("code",[t._v("setUncaughtExceptionHandler()")]),t._v("方法，此异常处理器优先处理，其他异常处理器不再处理。")])])}),[],!1,null,null,null);a.default=e.exports}}]);