(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{506:function(s,t,n){"use strict";n.r(t);var a=n(3),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-什么是synchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是synchronized"}},[s._v("#")]),s._v(" 1. 什么是synchronized？")]),s._v(" "),t("blockquote",[t("p",[t("strong",[t("code",[s._v("synchronized")]),s._v(" 关键字解决的是多个线程之间访问资源的同步性，"),t("code",[s._v("synchronized")]),s._v("关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。")])])]),s._v(" "),t("h2",{attrs:{id:"_2-怎么使用-synchronized-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么使用-synchronized-关键字"}},[s._v("#")]),s._v(" 2. 怎么使用 synchronized 关键字？")]),s._v(" "),t("p",[t("strong",[s._v("synchronized 锁的是什么？")])]),s._v(" "),t("ul",[t("li",[s._v("对于普通同步方法，锁是当前实例对象。")]),s._v(" "),t("li",[s._v("对于静态同步方法，锁是当前类的Class对象。")]),s._v(" "),t("li",[s._v("对于同步代码块，锁是Synchonized括号里配置的对象。")])]),s._v(" "),t("p",[t("strong",[s._v("synchronized 关键字最主要的三种使用方式：")])]),s._v(" "),t("p",[t("strong",[s._v("1.修饰实例方法:")]),s._v(" 作用于当前对象实例加锁，进入同步代码前要获得 "),t("strong",[s._v("当前对象实例的锁")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//业务代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("2.修饰静态方法:")]),s._v(" 也就是给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 "),t("strong",[s._v("当前 Class对象 的锁")]),s._v("。因为静态成员不属于任何一个实例对象，是类成员（ "),t("em",[s._v("static 表明这是该类的一个静态资源，不管 new 了多少个对象，只有一份")]),s._v("）。所以，如果一个线程 A 调用一个实例对象的非静态 "),t("code",[s._v("synchronized")]),s._v(" 方法，而线程 B 需要调用这个实例对象所属类的静态 "),t("code",[s._v("synchronized")]),s._v(" 方法，是允许的，不会发生互斥现象，"),t("strong",[s._v("因为访问静态 "),t("code",[s._v("synchronized")]),s._v(" 方法占用的锁是当前类的锁，而访问非静态 "),t("code",[s._v("synchronized")]),s._v(" 方法占用的锁是当前实例对象锁")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//业务代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("3.修饰代码块")]),s._v(" ：指定加锁对象，对给定对象/类加锁。"),t("code",[s._v("synchronized(this|object)")]),s._v(" 表示进入同步代码库前要获得"),t("strong",[s._v("给定对象的锁")]),s._v("。"),t("code",[s._v("synchronized(类.class)")]),s._v(" 表示进入同步代码前要获得 "),t("strong",[s._v("当前 Class对象 的锁")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//业务代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("synchronized")]),s._v(" 关键字加到 "),t("code",[s._v("static")]),s._v(" 静态方法和 "),t("code",[s._v("synchronized(class)")]),s._v(" 代码块上都是是给 Class 类上锁。")]),s._v(" "),t("li",[t("code",[s._v("synchronized")]),s._v(" 关键字加到实例方法上是给对象实例上锁。")]),s._v(" "),t("li",[s._v("尽量不要使用 "),t("code",[s._v("synchronized(String a)")]),s._v(" 因为 JVM 中，字符串常量池具有缓存功能！")])]),s._v(" "),t("p",[s._v("下面我以一个常见的面试题为例讲解一下 "),t("code",[s._v("synchronized")]),s._v(" 关键字的具体使用。")]),s._v(" "),t("p",[s._v("面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”")]),s._v(" "),t("p",[t("strong",[s._v("双重校验锁实现对象单例（线程安全）")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" uniqueInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getUniqueInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//先判断对象是否已经实例过，没有实例化过才进入加锁代码")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类对象加锁")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" uniqueInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("另外，需要注意 "),t("code",[s._v("uniqueInstance")]),s._v(" 采用 "),t("code",[s._v("volatile")]),s._v(" 关键字修饰也是很有必要。")]),s._v(" "),t("p",[t("code",[s._v("uniqueInstance")]),s._v(" 采用 "),t("code",[s._v("volatile")]),s._v(" 关键字修饰也是很有必要的， "),t("code",[s._v("uniqueInstance = new Singleton();")]),s._v(" 这段代码其实是分为三步执行：")]),s._v(" "),t("ol",[t("li",[s._v("为 "),t("code",[s._v("uniqueInstance")]),s._v(" 分配内存空间")]),s._v(" "),t("li",[s._v("初始化 "),t("code",[s._v("uniqueInstance")])]),s._v(" "),t("li",[s._v("将 "),t("code",[s._v("uniqueInstance")]),s._v(" 指向分配的内存地址")])]),s._v(" "),t("p",[s._v("但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1->3->2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 "),t("code",[s._v("getUniqueInstance")]),s._v("() 后发现 "),t("code",[s._v("uniqueInstance")]),s._v(" 不为空，因此返回 "),t("code",[s._v("uniqueInstance")]),s._v("，但此时 "),t("code",[s._v("uniqueInstance")]),s._v(" 还未被初始化。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("volatile")]),s._v(" 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。")]),s._v(" "),t("h2",{attrs:{id:"_3-构造方法可以使用-synchronized-关键字修饰么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-构造方法可以使用-synchronized-关键字修饰么"}},[s._v("#")]),s._v(" 3. 构造方法可以使用 synchronized 关键字修饰么？")]),s._v(" "),t("p",[t("strong",[s._v("构造方法不能使用 synchronized 关键字修饰。")])]),s._v(" "),t("p",[s._v("构造方法本身就属于线程安全的，不存在同步的构造方法一说。")]),s._v(" "),t("h2",{attrs:{id:"_4-synchronized-关键字的底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-synchronized-关键字的底层原理"}},[s._v("#")]),s._v(" 4.  synchronized 关键字的底层原理")]),s._v(" "),t("p",[s._v("当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。那么锁到底存在哪里呢？锁里面会存储什么信息呢？")]),s._v(" "),t("p",[t("strong",[s._v("synchronized 关键字底层原理属于 JVM 层面。")])]),s._v(" "),t("h3",{attrs:{id:"_4-1-synchronized-同步语句块的情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-synchronized-同步语句块的情况"}},[s._v("#")]),s._v(" 4.1 synchronized 同步语句块的情况")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedDemo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"synchronized 代码块"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("通过 JDK 自带的 "),t("code",[s._v("javap")]),s._v(" 命令查看 "),t("code",[s._v("SynchronizedDemo")]),s._v(" 类的相关字节码信息：首先切换到类的对应目录执行 "),t("code",[s._v("javac SynchronizedDemo.java")]),s._v(" 命令生成编译后的 .class 文件，然后执行"),t("code",[s._v("javap -c -s -v -l SynchronizedDemo.class")]),s._v("。")]),s._v(" "),t("img",{attrs:{src:"https://gitee.com/koala010/typora/raw/master/img/SynchronizedDemo的jvm情况.png",alt:"image-20210614165327757"}}),s._v(" "),t("p",[s._v("从上面我们可以看出：")]),s._v(" "),t("p",[t("strong",[t("code",[s._v("synchronized")]),s._v(" 同步语句块的实现使用的是 "),t("code",[s._v("monitorenter")]),s._v(" 和 "),t("code",[s._v("monitorexit")]),s._v(" 指令，其中 "),t("code",[s._v("monitorenter")]),s._v(" 指令指向同步代码块的开始位置，"),t("code",[s._v("monitorexit")]),s._v(" 指令则指明同步代码块的结束位置/异常位置。")])]),s._v(" "),t("p",[s._v("当执行 "),t("code",[s._v("monitorenter")]),s._v(" 指令时，线程试图获取锁也就是获取 "),t("strong",[s._v("对象监视器 "),t("code",[s._v("monitor")])]),s._v(" 的持有权。")]),s._v(" "),t("blockquote",[t("p",[s._v("在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由"),t("a",{attrs:{href:"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"}},[s._v("ObjectMonitor"),t("OutboundLink")],1),s._v("实现的。每个对象中都内置了一个 "),t("code",[s._v("ObjectMonitor")]),s._v("对象。")]),s._v(" "),t("p",[s._v("另外，"),t("code",[s._v("wait/notify")]),s._v("等方法也依赖于"),t("code",[s._v("monitor")]),s._v("对象，这就是为什么只有在同步的块或者方法中才能调用"),t("code",[s._v("wait/notify")]),s._v("等方法，否则会抛出"),t("code",[s._v("java.lang.IllegalMonitorStateException")]),s._v("的异常的原因。")])]),s._v(" "),t("p",[s._v("在执行"),t("code",[s._v("monitorenter")]),s._v("时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。")]),s._v(" "),t("p",[s._v("在执行 "),t("code",[s._v("monitorexit")]),s._v(" 指令后，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。.")]),s._v(" "),t("h3",{attrs:{id:"_4-2-synchronized-修饰方法的的情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-synchronized-修饰方法的的情况"}},[s._v("#")]),s._v(" 4.2 synchronized 修饰方法的的情况")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedDemo2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"synchronized 方法"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://gitee.com/koala010/typora/raw/master/img/synchronized%E4%BF%AE%E9%A5%B0%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86.png",alt:"image-20210614165617408"}})]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 修饰的方法并没有 "),t("code",[s._v("monitorenter")]),s._v(" 指令和 "),t("code",[s._v("monitorexit")]),s._v(" 指令，取得代之的确实是 "),t("code",[s._v("ACC_SYNCHRONIZED")]),s._v(" 标识，该标识指明了该方法是一个同步方法。JVM 通过该 "),t("code",[s._v("ACC_SYNCHRONIZED")]),s._v(" 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。")]),s._v(" "),t("h3",{attrs:{id:"_4-3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-总结"}},[s._v("#")]),s._v(" 4.3 总结")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 同步语句块的实现使用的是 "),t("code",[s._v("monitorenter")]),s._v(" 和 "),t("code",[s._v("monitorexit")]),s._v(" 指令，其中 "),t("code",[s._v("monitorenter")]),s._v(" 指令指向同步代码块的开始位置，"),t("code",[s._v("monitorexit")]),s._v(" 指令则指明同步代码块的结束位置。")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 修饰的方法并没有 "),t("code",[s._v("monitorenter")]),s._v(" 指令和 "),t("code",[s._v("monitorexit")]),s._v(" 指令，取得代之的确实是 "),t("code",[s._v("ACC_SYNCHRONIZED")]),s._v(" 标识，该标识指明了该方法是一个同步方法。")]),s._v(" "),t("p",[t("strong",[s._v("不过两者的本质都是对对象监视器 monitor 的获取。")])]),s._v(" "),t("h2",{attrs:{id:"_5-jdk1-6-之后的-synchronized-关键字底层做了哪些优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-jdk1-6-之后的-synchronized-关键字底层做了哪些优化"}},[s._v("#")]),s._v(" 5 JDK1.6 之后的 synchronized 关键字底层做了哪些优化？")]),s._v(" "),t("p",[s._v("JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。")]),s._v(" "),t("p",[s._v("锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。")]),s._v(" "),t("p",[s._v("关于这几种优化的详细信息可以查看下面这篇文章："),t("a",{attrs:{href:"https://www.cnblogs.com/wuqinglong/p/9945618.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java6 及以上版本对 synchronized 的优化"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"_6-synchronized-和-reentrantlock-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-synchronized-和-reentrantlock-的区别"}},[s._v("#")]),s._v(" 6 synchronized 和 ReentrantLock 的区别")]),s._v(" "),t("h3",{attrs:{id:"_6-1-两者都是可重入锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-两者都是可重入锁"}},[s._v("#")]),s._v(" 6.1 两者都是可重入锁")]),s._v(" "),t("p",[t("strong",[s._v("“可重入锁”")]),s._v(" 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。")]),s._v(" "),t("h3",{attrs:{id:"_6-2-synchronized-依赖于-jvm-而-reentrantlock-依赖于-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-synchronized-依赖于-jvm-而-reentrantlock-依赖于-api"}},[s._v("#")]),s._v(" 6.2 synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 "),t("code",[s._v("synchronized")]),s._v(" 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。"),t("code",[s._v("ReentrantLock")]),s._v(" 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。")]),s._v(" "),t("h3",{attrs:{id:"_6-3-reentrantlock-比-synchronized-增加了一些高级功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-reentrantlock-比-synchronized-增加了一些高级功能"}},[s._v("#")]),s._v(" 6.3 ReentrantLock 比 synchronized 增加了一些高级功能")]),s._v(" "),t("p",[s._v("相比"),t("code",[s._v("synchronized")]),s._v("，"),t("code",[s._v("ReentrantLock")]),s._v("增加了一些高级功能。主要来说主要有三点：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("等待可中断")]),s._v(" : "),t("code",[s._v("ReentrantLock")]),s._v("提供了一种能够中断等待锁的线程的机制，通过 "),t("code",[s._v("lock.lockInterruptibly()")]),s._v(" 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。")]),s._v(" "),t("li",[t("strong",[s._v("可实现公平锁")]),s._v(" : "),t("code",[s._v("ReentrantLock")]),s._v("可以指定是公平锁还是非公平锁。而"),t("code",[s._v("synchronized")]),s._v("只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。"),t("code",[s._v("ReentrantLock")]),s._v("默认情况是非公平的，可以通过 "),t("code",[s._v("ReentrantLock")]),s._v("类的"),t("code",[s._v("ReentrantLock(boolean fair)")]),s._v("构造方法来制定是否是公平的。")]),s._v(" "),t("li",[t("strong",[s._v("可实现选择性通知（锁可以绑定多个条件）")]),s._v(": "),t("code",[s._v("synchronized")]),s._v("关键字与"),t("code",[s._v("wait()")]),s._v("和"),t("code",[s._v("notify()")]),s._v("/"),t("code",[s._v("notifyAll()")]),s._v("方法相结合可以实现等待/通知机制。"),t("code",[s._v("ReentrantLock")]),s._v("类当然也可以实现，但是需要借助于"),t("code",[s._v("Condition")]),s._v("接口与"),t("code",[s._v("newCondition()")]),s._v("方法。")])]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("Condition")]),s._v("是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个"),t("code",[s._v("Lock")]),s._v("对象中可以创建多个"),t("code",[s._v("Condition")]),s._v("实例（即对象监视器），"),t("strong",[s._v("线程对象可以注册在指定的"),t("code",[s._v("Condition")]),s._v("中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用"),t("code",[s._v("notify()/notifyAll()")]),s._v("方法进行通知时，被通知的线程是由 JVM 选择的，用"),t("code",[s._v("ReentrantLock")]),s._v("类结合"),t("code",[s._v("Condition")]),s._v("实例可以实现“选择性通知”")]),s._v(" ，这个功能非常重要，而且是 Condition 接口默认提供的。而"),t("code",[s._v("synchronized")]),s._v("关键字就相当于整个 Lock 对象中只有一个"),t("code",[s._v("Condition")]),s._v("实例，所有的线程都注册在它一个身上。如果执行"),t("code",[s._v("notifyAll()")]),s._v("方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而"),t("code",[s._v("Condition")]),s._v("实例的"),t("code",[s._v("signalAll()")]),s._v("方法 只会唤醒注册在该"),t("code",[s._v("Condition")]),s._v("实例中的所有等待线程。")])]),s._v(" "),t("p",[t("strong",[s._v("如果你想使用上述功能，那么选择 ReentrantLock 是一个不错的选择。性能已不是选择标准")])]),s._v(" "),t("h2",{attrs:{id:"_7-synchronized与对象头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-synchronized与对象头"}},[s._v("#")]),s._v(" 7. synchronized与对象头")]),s._v(" "),t("p",[s._v("synchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。")]),s._v(" "),t("p",[s._v("Java对象头的长度：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011130581.png",alt:"Java对象头的长度"}})]),s._v(" "),t("p",[s._v("Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位。")]),s._v(" "),t("p",[s._v("Java对象头的存储结构：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011131420.png",alt:"Java对象头的存储结构"}})]),s._v(" "),t("p",[s._v("在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。Mark Word可能变化为存储以下4种数据：")]),s._v(" "),t("p",[s._v("32位Mark Word的状态变化：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011132836.png",alt:"32位Mark Word的状态变化"}})]),s._v(" "),t("p",[s._v("在64位虚拟机下，Mark Word是64bit大小的，其存储结构如表：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011133698.png",alt:"64位 Mark Word的存储结构"}})]),s._v(" "),t("h2",{attrs:{id:"_8-synchronized的锁升级过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-synchronized的锁升级过程"}},[s._v("#")]),s._v(" 8 synchronized的锁升级过程")]),s._v(" "),t("p",[s._v("锁升级过程依次为：无锁状态、偏向锁、轻量级锁、重量级锁。")]),s._v(" "),t("p",[s._v("synchronized可以进行锁升级，但是不能降级，目的是"),t("strong",[s._v("为了提高获得锁和释放锁的效率")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_8-1-偏向锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-偏向锁"}},[s._v("#")]),s._v(" 8.1 偏向锁")]),s._v(" "),t("blockquote",[t("p",[s._v("HotSpot作者发现，大多数情况下，"),t("strong",[s._v("锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁")]),s._v("。")])]),s._v(" "),t("p",[t("strong",[s._v("对象头")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("23bit的线程ID；")]),s._v(" "),t("li",[s._v("1bit是否为偏向锁值为1说明是偏向锁状态；")]),s._v(" "),t("li",[s._v("无锁和偏向锁2bit的锁标志位都是01")])]),s._v(" "),t("p",[t("strong",[s._v("偏向锁加锁过程")]),s._v("：")]),s._v(" "),t("ol",[t("li",[s._v("检查对象头和栈帧中的锁记录是否存储了当前线程的线程ID\n"),t("ol",[t("li",[s._v("即简单测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁即可")]),s._v(" "),t("li",[t("em",[s._v("（为了保证当前线程每次进入和退出同步块时不需要CAS操作加锁和解锁）")])])])]),s._v(" "),t("li",[s._v("测试成功表示获得了锁")]),s._v(" "),t("li",[s._v("测试失败再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）\n"),t("ol",[t("li",[s._v("如果没有设置，则使用CAS竞争锁")]),s._v(" "),t("li",[s._v("如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程")])])])]),s._v(" "),t("p",[t("strong",[s._v("偏向锁撤销过程")]),s._v("：")]),s._v(" "),t("p",[s._v("偏向锁使用了一种"),t("strong",[s._v("等到竞争出现才释放锁")]),s._v("的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。")]),s._v(" "),t("ol",[t("li",[s._v("前提条件：等待全局安全点（在这个时间点上没有正在执行的字节码）")]),s._v(" "),t("li",[s._v("暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着")]),s._v(" "),t("li",[s._v("如果线程不处于活动状态，则将对象头设置成无锁状态")]),s._v(" "),t("li",[s._v("如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁")]),s._v(" "),t("li",[s._v("最后唤醒暂停的线程")])]),s._v(" "),t("p",[t("strong",[s._v("偏向锁获得和撤销锁的过程：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011056649.png",alt:"偏向锁获得和撤销锁的过程"}})]),s._v(" "),t("p",[t("strong",[s._v("偏向锁的升级：")])]),s._v(" "),t("p",[t("strong",[s._v("只要存在两个线程的并发竞争，偏向锁升级为轻量级锁")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_8-2-轻量级锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-轻量级锁"}},[s._v("#")]),s._v(" 8.2 轻量级锁")]),s._v(" "),t("p",[t("strong",[s._v("轻量级锁加锁过程：")])]),s._v(" "),t("ol",[t("li",[s._v("线程在执行同步块前，JVM在当前线程栈帧中分配空间，并将对象头中的Mark Word复制到锁记录中（官方称为Displaced Mark Word）")]),s._v(" "),t("li",[s._v("CAS将对象头中的Mark Word替换为指向锁记录的指针")]),s._v(" "),t("li",[s._v("如果成功，当前线程获得锁")]),s._v(" "),t("li",[s._v("如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁")])]),s._v(" "),t("p",[t("strong",[s._v("轻量级锁撤销过程：")])]),s._v(" "),t("ol",[t("li",[s._v("CAS操作将Displaced Mark Word替换回到对象头")]),s._v(" "),t("li",[s._v("如果成功，则表示没有竞争发生")]),s._v(" "),t("li",[s._v("如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁")])]),s._v(" "),t("p",[t("strong",[s._v("轻量级锁膨胀的流程图")]),s._v("：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011116663.png",alt:"轻量级锁膨胀的流程图"}})]),s._v(" "),t("h3",{attrs:{id:"_8-3-重量级锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-重量级锁"}},[s._v("#")]),s._v(" 8.3 重量级锁")]),s._v(" "),t("p",[s._v("因为"),t("strong",[s._v("自旋会消耗CPU")]),s._v("，为了"),t("strong",[s._v("避免无用的自旋")]),s._v("（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。")]),s._v(" "),t("p",[t("strong",[s._v("当锁处于重量级锁状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_8-4-锁的优缺点对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-锁的优缺点对比"}},[s._v("#")]),s._v(" 8.4 锁的优缺点对比")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202110011118990.png",alt:"synchronized锁的优缺点对比"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);