(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{540:function(e,r,t){"use strict";t.r(r);var v=t(3),p=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"拦截器-interceptor-和过滤器-filter-的执行顺序和区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拦截器-interceptor-和过滤器-filter-的执行顺序和区别"}},[e._v("#")]),e._v(" 拦截器（Interceptor）和过滤器（Filter）的执行顺序和区别")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("拦截器是基于java的反射机制的，aop实现，可以在方法前后，而过滤器是基于函数回调，需要在web.xml中配置。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("拦截器不依赖与servlet容器，过滤器依赖与servlet容器。")])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。")])])]),e._v(" "),r("li",[r("p",[e._v("过滤器能够修改reques，而拦截器不行")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。")])])]),e._v(" "),r("li",[r("p",[e._v("Filter的执行顺序在Interceptor之前，具体的流程见下图")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://typecho-1300745270.cos.ap-shanghai.myqcloud.com/typora/202202211029676.png",alt:"img"}})])])]),e._v(" "),r("p",[e._v("也就是")]),e._v(" "),r("p",[e._v("过滤器：能够拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息")]),e._v(" "),r("p",[e._v("拦截器：可以拿到你请求的控制器和方法，拿不到请求方法的参数")]),e._v(" "),r("h2",{attrs:{id:"springmvc-的工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-的工作原理"}},[e._v("#")]),e._v(" SpringMVC 的工作原理")]),e._v(" "),r("p",[r("strong",[e._v("简单来说：")])]),e._v(" "),r("p",[e._v("客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler-> HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象->前端控制器 DispatcherServlet 渲染数据（Model）->将得到视图对象返回给用户")]),e._v(" "),r("p",[r("strong",[e._v("如下图所示：")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1151586/201904/1151586-20190402143210955-936388110.png",alt:"img"}})]),e._v(" "),r("p",[e._v("上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 DispatcherServlet 的作用是接收请求，响应结果。")]),e._v(" "),r("p",[r("strong",[e._v("流程说明（重要）：")])]),e._v(" "),r("p",[e._v("（1）客户端（浏览器）发送请求，直接请求到 DispatcherServlet。")]),e._v(" "),r("p",[e._v("（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。")]),e._v(" "),r("p",[e._v("（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。")]),e._v(" "),r("p",[e._v("（4）HandlerAdapter 会根据 Handler 来调用真正的处理器处理请求，并处理相应的业务逻辑。")]),e._v(" "),r("p",[e._v("（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。")]),e._v(" "),r("p",[e._v("（6）ViewResolver 会根据逻辑 View 查找实际的 View。")]),e._v(" "),r("p",[e._v("（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。")]),e._v(" "),r("p",[e._v("（8）把 View 返回给请求者（浏览器）")]),e._v(" "),r("h2",{attrs:{id:"springmvc-重要组件说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-重要组件说明"}},[e._v("#")]),e._v(" SpringMVC 重要组件说明")]),e._v(" "),r("p",[r("strong",[e._v("1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供（重要）")])]),e._v(" "),r("p",[e._v("作用："),r("strong",[e._v("Spring MVC 的入口函数。接收请求，响应结果，相当于转发器，中央处理器。有了 DispatcherServlet 减少了其它组件之间的耦合度。用户请求到达前端控制器，它就相当于mvc模式中的c，DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。")])]),e._v(" "),r("p",[r("strong",[e._v("2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供")])]),e._v(" "),r("p",[e._v("作用：根据请求的url查找Handler。HandlerMapping负责根据用户请求找到Handler即处理器（Controller），SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。")]),e._v(" "),r("p",[r("strong",[e._v("3、处理器适配器HandlerAdapter")])]),e._v(" "),r("p",[e._v("作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler 通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。")]),e._v(" "),r("p",[r("strong",[e._v("4、处理器Handler(需要工程师开发)")])]),e._v(" "),r("p",[e._v("注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。 由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。")]),e._v(" "),r("p",[r("strong",[e._v("5、视图解析器View resolver(不需要工程师开发),由框架提供")])]),e._v(" "),r("p",[e._v("作用：进行视图解析，根据逻辑视图名解析成真正的视图（view） View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。")]),e._v(" "),r("p",[r("strong",[e._v("6、视图View(需要工程师开发)")])]),e._v(" "),r("p",[e._v("View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）")]),e._v(" "),r("p",[r("strong",[e._v("注意：处理器Handler（也就是我们平常说的Controller控制器）以及视图层view都是需要我们自己手动开发的。其他的一些组件比如：前端控制器DispatcherServlet、处理器映射器HandlerMapping、处理器适配器HandlerAdapter等等都是框架提供给我们的，不需要自己手动开发。")])])])}),[],!1,null,null,null);r.default=p.exports}}]);